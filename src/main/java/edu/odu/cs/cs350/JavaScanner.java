package edu.odu.cs.cs350;
@SuppressWarnings("unused")



/**
 * Java scanner created from Java-specific keywords
 * 
 * This class is a scanner generated by JFlex 1.7.0
 */
public class JavaScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\57"+
    "\2\0\1\6\1\70\1\63\1\0\1\43\1\44\1\5\1\65\1\52"+
    "\1\66\1\53\1\4\1\10\11\10\1\62\1\51\1\56\1\54\1\55"+
    "\1\61\1\0\22\6\1\41\7\6\1\47\1\0\1\50\1\67\1\11"+
    "\1\0\1\12\1\13\1\17\1\31\1\22\1\33\1\36\1\26\1\27"+
    "\1\6\1\24\1\21\1\34\1\23\1\20\1\35\1\6\1\16\1\14"+
    "\1\15\1\30\1\37\1\40\1\32\1\25\1\42\1\45\1\64\1\46"+
    "\1\60\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0"+
    "\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0"+
    "\246\6\1\0\46\6\2\0\1\6\6\0\51\6\6\0\1\6\1\0"+
    "\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0"+
    "\33\6\4\0\4\6\15\0\6\7\5\0\1\6\4\0\13\7\1\0"+
    "\1\7\3\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\2\0"+
    "\1\7\30\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0"+
    "\31\6\3\7\4\0\13\6\65\0\25\6\1\0\10\6\25\0\61\7"+
    "\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7"+
    "\1\0\20\6\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\4\6\7\0\2\6\1\0\1\7\2\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\7\0\1\6\6\7\1\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\7\11\0\1\6\6\0\5\7\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\20\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\3\6\5\0\2\6\2\7\2\0\12\7\20\0"+
    "\1\6\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0"+
    "\2\6\15\0\4\7\1\0\10\6\1\0\3\6\1\0\51\6\2\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\1\6\5\0\3\6\1\7"+
    "\7\0\3\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\7\4\0\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0"+
    "\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7"+
    "\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6"+
    "\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7"+
    "\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6"+
    "\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7"+
    "\40\0\20\6\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6"+
    "\1\0\32\6\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6"+
    "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0"+
    "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"+
    "\1\7\2\0\12\7\41\0\4\7\1\0\12\7\6\0\131\6\7\0"+
    "\5\6\2\7\42\6\1\7\1\6\5\0\106\6\12\0\37\6\1\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6"+
    "\4\0\32\6\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7"+
    "\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\10\0\16\7"+
    "\102\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0"+
    "\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7"+
    "\10\0\12\7\3\0\3\6\12\7\44\6\2\0\11\6\7\0\53\6"+
    "\2\0\3\6\20\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7"+
    "\2\6\3\7\6\0\300\6\72\7\1\0\5\7\u0116\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\1\0\12\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\40\6\20\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\53\6\1\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51f0\6\20\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\37\6\2\7"+
    "\120\6\2\7\45\0\11\6\2\0\147\6\2\0\57\6\75\0\13\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0"+
    "\64\6\14\0\2\7\62\6\22\7\12\0\12\7\6\0\22\7\6\6"+
    "\3\0\1\6\1\0\2\6\13\7\34\6\10\7\2\0\27\6\15\7"+
    "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\6\0"+
    "\5\6\1\7\12\6\12\7\5\6\1\0\51\6\16\7\11\0\3\6"+
    "\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\3\7"+
    "\62\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7"+
    "\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0"+
    "\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0"+
    "\53\6\1\0\12\6\12\0\163\6\10\7\1\0\2\7\2\0\12\7"+
    "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6"+
    "\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\20\7\3\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6"+
    "\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6"+
    "\3\0\61\6\17\0\1\7\37\0\40\6\15\0\36\6\5\0\46\6"+
    "\5\7\5\0\36\6\2\0\44\6\4\0\10\6\1\0\5\6\52\0"+
    "\236\6\2\0\12\7\6\0\44\6\4\0\44\6\4\0\50\6\10\0"+
    "\64\6\234\0\u0137\6\11\0\26\6\12\0\10\6\230\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\12\0"+
    "\27\6\11\0\37\6\101\0\23\6\1\0\2\6\12\0\26\6\12\0"+
    "\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7"+
    "\5\0\4\7\4\6\1\0\3\6\1\0\35\6\2\0\3\7\4\0"+
    "\1\7\40\0\35\6\3\0\35\6\43\0\10\6\1\0\34\6\2\7"+
    "\31\0\66\6\12\0\26\6\12\0\23\6\15\0\22\6\156\0\111\6"+
    "\67\0\63\6\15\0\63\6\15\0\44\6\4\7\10\0\12\7\u01c6\0"+
    "\35\6\12\0\1\6\10\0\26\6\13\7\257\0\3\7\65\6\17\7"+
    "\37\0\12\7\17\0\4\7\55\6\13\7\2\0\1\7\17\0\1\7"+
    "\2\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7"+
    "\4\0\1\6\2\7\11\0\43\6\1\7\2\0\1\6\11\0\3\7"+
    "\60\6\16\7\4\6\4\0\4\7\3\0\12\7\1\6\1\0\1\6"+
    "\43\0\22\6\1\0\31\6\14\7\6\0\1\7\101\0\7\6\1\0"+
    "\1\6\1\0\4\6\1\0\17\6\1\0\12\6\7\0\57\6\14\7"+
    "\5\0\12\7\6\0\4\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\1\0\2\7\1\6\7\7"+
    "\2\0\2\7\2\0\3\7\2\0\1\6\6\0\1\7\5\0\5\6"+
    "\2\7\2\0\7\7\3\0\5\7\213\0\65\6\22\7\4\6\5\0"+
    "\12\7\4\0\1\7\41\0\60\6\24\7\2\6\1\0\1\6\10\0"+
    "\12\7\246\0\57\6\7\7\2\0\11\7\27\0\4\6\2\7\42\0"+
    "\60\6\21\7\3\0\1\6\13\0\12\7\46\0\53\6\15\7\10\0"+
    "\12\7\66\0\33\6\2\0\17\7\4\0\12\7\306\0\54\6\17\7"+
    "\145\0\100\6\12\7\25\0\1\6\u0100\0\1\6\12\7\50\6\7\7"+
    "\1\6\4\7\10\0\1\7\10\0\1\6\13\7\50\6\2\0\4\6"+
    "\20\7\3\0\1\6\42\0\71\6\u0107\0\11\6\1\0\45\6\10\7"+
    "\1\0\10\7\1\6\17\0\12\7\30\0\36\6\2\0\26\7\1\0"+
    "\16\7\111\0\7\6\1\0\2\6\1\0\46\6\6\7\3\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\6\1\7\10\0\12\7\6\0\6\6"+
    "\1\0\2\6\1\0\40\6\5\7\1\0\2\7\1\0\5\7\1\6"+
    "\7\0\12\7\u0136\0\23\6\4\7\u0109\0\u039a\6\146\0\157\6\21\0"+
    "\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0\37\6\1\0"+
    "\12\7\146\0\36\6\2\0\5\7\13\0\60\6\7\7\11\0\4\6"+
    "\14\0\12\7\11\0\25\6\5\0\23\6\u02b0\0\100\6\200\0\105\6"+
    "\13\0\1\6\56\7\20\0\4\7\15\6\100\0\2\6\36\0\u17f2\6"+
    "\16\0\u02f3\6\u250d\0\u011f\6\121\0\u018c\6\u0904\0\153\6\5\0\15\6"+
    "\3\0\11\6\7\0\12\6\3\0\2\7\1\0\4\7\u14c1\0\5\7"+
    "\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6"+
    "\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6"+
    "\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6"+
    "\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6"+
    "\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7"+
    "\u0200\0\67\7\4\0\62\7\10\0\1\7\16\0\1\7\26\0\5\7"+
    "\1\0\17\7\u0550\0\7\7\1\0\21\7\2\0\7\7\1\0\2\7"+
    "\1\0\5\7\u07d5\0\305\6\13\0\7\7\51\0\104\6\7\7\5\0"+
    "\12\7\u0356\0\1\6\u014f\0\4\6\1\0\33\6\1\0\2\6\1\0"+
    "\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0"+
    "\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0"+
    "\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0"+
    "\ua6d7\6\51\0\u1035\6\13\0\336\6\2\0\u1682\6\16\0\u1d31\6\u0c1f\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\1\3\1\4\1\5\1\6\21\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\1\1\0"+
    "\1\35\1\36\1\0\27\5\1\37\1\5\1\40\14\5"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\2\0\13\5\1\61\15\5\1\62\2\5\1\63\4\5"+
    "\1\64\13\5\1\65\1\66\1\67\1\0\1\1\3\5"+
    "\1\70\7\5\1\71\1\5\1\72\1\5\1\73\4\5"+
    "\1\74\1\75\1\76\2\5\1\77\15\5\1\100\1\5"+
    "\1\101\2\5\1\102\1\5\1\103\4\5\1\104\1\105"+
    "\2\5\1\106\1\5\1\107\1\110\1\5\1\111\10\5"+
    "\1\112\1\113\1\114\5\5\1\115\3\5\1\116\2\5"+
    "\1\117\1\5\1\120\1\121\2\5\1\122\2\5\1\123"+
    "\1\5\1\124\5\5\1\125\1\5\1\126\1\5\1\127"+
    "\4\5\1\130\3\5\1\131\1\132\1\133\1\5\1\134"+
    "\1\5\1\135\1\136\2\5\1\137\4\5\1\140\1\5"+
    "\1\141\1\5\1\142\1\5\1\143\1\5\1\144\1\145"+
    "\1\5\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\u0558\0\u0591\0\u05ca\0\u0603\0\71\0\71"+
    "\0\71\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\71\0\71\0\u0156\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u011d\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\71\0\71\0\u1041\0\71\0\u107a\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u011d"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u011d\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u011d\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\71\0\u1a7f\0\71\0\u1ab8\0\u10b3\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u011d\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u011d\0\u1d2b\0\u011d\0\u1d64\0\u011d\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u011d\0\u011d\0\u011d\0\u1e81\0\u1eba\0\u011d"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u011d\0\u21d8\0\u011d"+
    "\0\u2211\0\u224a\0\71\0\u2283\0\u011d\0\u22bc\0\u22f5\0\u232e"+
    "\0\u2367\0\u011d\0\u011d\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u011d"+
    "\0\u011d\0\u2484\0\u011d\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u011d\0\u011d\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u011d\0\u27db\0\u2814\0\u284d\0\u011d"+
    "\0\u2886\0\u28bf\0\u011d\0\u28f8\0\u011d\0\u011d\0\u2931\0\u296a"+
    "\0\u011d\0\u29a3\0\u29dc\0\u011d\0\u2a15\0\u011d\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u011d\0\u2b6b\0\u011d\0\u2ba4\0\u011d"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u011d\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u011d\0\u011d\0\u011d\0\u2d6c\0\u011d\0\u2da5\0\u011d\0\u011d"+
    "\0\u2dde\0\u2e17\0\u011d\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u011d"+
    "\0\u2f34\0\u011d\0\u2f6d\0\u011d\0\u2fa6\0\u011d\0\u2fdf\0\u011d"+
    "\0\u011d\0\u3018\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\7"+
    "\1\17\1\20\1\21\3\7\1\22\1\7\1\23\1\7"+
    "\1\24\1\7\1\25\1\26\1\27\1\30\1\31\1\7"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\73\0\1\4"+
    "\72\0\1\60\1\61\46\0\1\62\70\0\1\63\22\0"+
    "\35\7\36\0\1\10\1\64\65\0\5\7\1\65\27\7"+
    "\34\0\10\7\1\66\1\7\1\67\4\7\1\70\15\7"+
    "\34\0\7\7\1\71\7\7\1\72\1\73\1\7\1\74"+
    "\7\7\1\75\2\7\34\0\10\7\1\76\7\7\1\77"+
    "\14\7\34\0\14\7\1\100\20\7\34\0\4\7\1\101"+
    "\5\7\1\102\1\103\4\7\1\104\14\7\34\0\12\7"+
    "\1\105\22\7\34\0\13\7\1\106\10\7\1\107\10\7"+
    "\34\0\4\7\1\110\7\7\1\111\5\7\1\112\12\7"+
    "\34\0\15\7\1\113\7\7\1\114\1\115\6\7\34\0"+
    "\12\7\1\116\1\7\1\117\20\7\34\0\4\7\1\120"+
    "\5\7\1\121\1\122\5\7\1\123\13\7\34\0\4\7"+
    "\1\124\3\7\1\125\11\7\1\126\12\7\34\0\12\7"+
    "\1\127\22\7\34\0\12\7\1\130\22\7\34\0\20\7"+
    "\1\131\14\7\34\0\7\7\1\132\25\7\102\0\1\133"+
    "\70\0\1\134\1\135\67\0\1\136\1\0\1\137\66\0"+
    "\1\140\70\0\1\141\6\0\1\142\61\0\1\143\7\0"+
    "\1\144\60\0\1\145\10\0\1\146\57\0\1\147\11\0"+
    "\1\150\56\0\1\151\70\0\1\152\14\0\1\60\1\3"+
    "\1\4\66\60\5\153\1\154\63\153\6\0\6\7\1\155"+
    "\26\7\34\0\14\7\1\156\20\7\34\0\12\7\1\157"+
    "\22\7\34\0\7\7\1\160\25\7\34\0\4\7\1\161"+
    "\3\7\1\162\24\7\34\0\15\7\1\163\17\7\34\0"+
    "\12\7\1\164\22\7\34\0\27\7\1\165\5\7\34\0"+
    "\21\7\1\166\13\7\34\0\4\7\1\167\12\7\1\170"+
    "\2\7\1\171\12\7\34\0\10\7\1\172\10\7\1\173"+
    "\13\7\34\0\7\7\1\174\25\7\34\0\6\7\1\175"+
    "\1\176\25\7\34\0\15\7\1\177\17\7\34\0\4\7"+
    "\1\200\30\7\34\0\4\7\1\201\30\7\34\0\15\7"+
    "\1\202\17\7\34\0\6\7\1\203\26\7\34\0\7\7"+
    "\1\204\25\7\34\0\7\7\1\205\25\7\34\0\32\7"+
    "\1\206\2\7\34\0\13\7\1\207\21\7\34\0\6\7"+
    "\1\210\1\211\25\7\34\0\27\7\1\212\5\7\34\0"+
    "\22\7\1\213\12\7\34\0\25\7\1\214\7\7\34\0"+
    "\13\7\1\215\21\7\34\0\10\7\1\216\24\7\34\0"+
    "\12\7\1\217\22\7\34\0\15\7\1\220\17\7\34\0"+
    "\11\7\1\221\23\7\34\0\12\7\1\222\6\7\1\223"+
    "\13\7\34\0\5\7\1\224\27\7\34\0\7\7\1\225"+
    "\25\7\34\0\13\7\1\226\5\7\1\227\13\7\34\0"+
    "\21\7\1\230\13\7\34\0\10\7\1\231\24\7\102\0"+
    "\1\232\1\233\67\0\1\234\14\0\5\153\1\235\67\153"+
    "\1\236\1\235\63\153\6\0\7\7\1\237\25\7\34\0"+
    "\4\7\1\240\30\7\34\0\13\7\1\241\21\7\34\0"+
    "\14\7\1\242\20\7\34\0\7\7\1\243\25\7\34\0"+
    "\21\7\1\244\13\7\34\0\11\7\1\245\23\7\34\0"+
    "\10\7\1\246\24\7\34\0\14\7\1\247\20\7\34\0"+
    "\7\7\1\250\25\7\34\0\15\7\1\251\17\7\34\0"+
    "\14\7\1\252\20\7\34\0\12\7\1\253\22\7\34\0"+
    "\6\7\1\254\26\7\34\0\22\7\1\255\12\7\34\0"+
    "\14\7\1\256\20\7\34\0\11\7\1\257\23\7\34\0"+
    "\6\7\1\260\1\261\25\7\34\0\6\7\1\262\26\7"+
    "\34\0\10\7\1\263\24\7\34\0\30\7\1\264\4\7"+
    "\34\0\14\7\1\265\20\7\34\0\14\7\1\266\20\7"+
    "\34\0\21\7\1\267\13\7\34\0\13\7\1\270\21\7"+
    "\34\0\7\7\1\271\25\7\34\0\14\7\1\272\20\7"+
    "\34\0\12\7\1\273\1\274\21\7\34\0\5\7\1\275"+
    "\27\7\34\0\4\7\1\276\30\7\34\0\6\7\1\277"+
    "\26\7\34\0\4\7\1\300\30\7\34\0\4\7\1\301"+
    "\30\7\34\0\16\7\1\302\16\7\34\0\7\7\1\303"+
    "\25\7\34\0\31\7\1\304\3\7\34\0\13\7\1\305"+
    "\21\7\34\0\12\7\1\306\22\7\34\0\4\7\1\307"+
    "\30\7\34\0\23\7\1\310\11\7\34\0\13\7\1\311"+
    "\21\7\34\0\21\7\1\312\13\7\102\0\1\313\14\0"+
    "\4\153\1\4\1\235\63\153\6\0\10\7\1\314\24\7"+
    "\34\0\16\7\1\315\16\7\34\0\14\7\1\316\20\7"+
    "\34\0\21\7\1\317\13\7\34\0\11\7\1\320\23\7"+
    "\34\0\20\7\1\321\14\7\34\0\7\7\1\322\25\7"+
    "\34\0\10\7\1\323\24\7\34\0\11\7\1\324\23\7"+
    "\34\0\6\7\1\325\26\7\34\0\32\7\1\326\2\7"+
    "\34\0\10\7\1\327\24\7\34\0\20\7\1\330\14\7"+
    "\34\0\7\7\1\331\25\7\34\0\21\7\1\332\13\7"+
    "\34\0\6\7\1\333\26\7\34\0\15\7\1\334\17\7"+
    "\34\0\31\7\1\335\3\7\34\0\4\7\1\336\30\7"+
    "\34\0\10\7\1\337\24\7\34\0\10\7\1\340\24\7"+
    "\34\0\14\7\1\341\20\7\34\0\13\7\1\342\21\7"+
    "\34\0\22\7\1\343\12\7\34\0\14\7\1\344\20\7"+
    "\34\0\7\7\1\345\25\7\34\0\13\7\1\346\21\7"+
    "\34\0\4\7\1\347\30\7\34\0\14\7\1\350\20\7"+
    "\34\0\4\7\1\351\30\7\34\0\21\7\1\352\13\7"+
    "\34\0\7\7\1\353\25\7\34\0\14\7\1\354\20\7"+
    "\34\0\15\7\1\355\17\7\34\0\4\7\1\356\30\7"+
    "\34\0\4\7\1\357\30\7\34\0\11\7\1\360\23\7"+
    "\34\0\7\7\1\361\25\7\34\0\10\7\1\362\24\7"+
    "\34\0\20\7\1\363\14\7\34\0\21\7\1\364\13\7"+
    "\34\0\6\7\1\365\26\7\34\0\15\7\1\366\17\7"+
    "\34\0\15\7\1\367\17\7\34\0\23\7\1\370\11\7"+
    "\34\0\14\7\1\371\20\7\34\0\15\7\1\372\17\7"+
    "\34\0\25\7\1\373\7\7\34\0\7\7\1\374\25\7"+
    "\34\0\26\7\1\375\6\7\34\0\14\7\1\376\20\7"+
    "\34\0\13\7\1\377\21\7\34\0\13\7\1\u0100\21\7"+
    "\34\0\30\7\1\u0101\4\7\34\0\11\7\1\u0102\23\7"+
    "\34\0\7\7\1\u0103\25\7\34\0\11\7\1\u0104\23\7"+
    "\34\0\21\7\1\u0105\13\7\34\0\30\7\1\u0106\4\7"+
    "\34\0\11\7\1\u0107\23\7\34\0\15\7\1\u0108\17\7"+
    "\34\0\25\7\1\u0109\7\7\34\0\12\7\1\u010a\22\7"+
    "\34\0\14\7\1\u010b\20\7\34\0\22\7\1\u010c\12\7"+
    "\34\0\6\7\1\u010d\26\7\34\0\11\7\1\u010e\23\7"+
    "\34\0\4\7\1\u010f\30\7\34\0\14\7\1\u0110\20\7"+
    "\34\0\7\7\1\u0111\25\7\34\0\17\7\1\u0112\15\7"+
    "\34\0\14\7\1\u0113\20\7\34\0\7\7\1\u0114\25\7"+
    "\34\0\14\7\1\u0115\20\7\34\0\13\7\1\u0116\21\7"+
    "\34\0\7\7\1\u0117\25\7\34\0\27\7\1\u0118\5\7"+
    "\34\0\15\7\1\u0119\17\7\34\0\15\7\1\u011a\17\7"+
    "\34\0\14\7\1\u011b\20\7\34\0\14\7\1\u011c\20\7"+
    "\34\0\11\7\1\u011d\23\7\34\0\15\7\1\u011e\17\7"+
    "\34\0\14\7\1\u011f\20\7\34\0\14\7\1\u0120\20\7"+
    "\34\0\21\7\1\u0121\13\7\34\0\7\7\1\u0122\25\7"+
    "\34\0\12\7\1\u0123\22\7\34\0\14\7\1\u0124\20\7"+
    "\34\0\7\7\1\u0125\25\7\34\0\23\7\1\u0126\11\7"+
    "\34\0\34\7\1\u0127\34\0\25\7\1\u0128\7\7\34\0"+
    "\6\7\1\u0129\26\7\34\0\14\7\1\u012a\20\7\34\0"+
    "\23\7\1\u012b\11\7\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12369];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\25\1\11\11\4\1\3\11"+
    "\7\1\1\0\2\11\1\0\46\1\2\11\1\1\1\11"+
    "\1\1\13\11\2\0\55\1\1\11\1\1\1\11\1\0"+
    "\55\1\1\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenKind type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenKind type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3542) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to ZZ_INITIAL.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position pos from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKind.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Ignore: don't return anything. */
            } 
            // fall through
          case 103: break;
          case 2: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 104: break;
          case 3: 
            { return symbol(TokenKind.DIV);
            } 
            // fall through
          case 105: break;
          case 4: 
            { return symbol(TokenKind.MULT);
            } 
            // fall through
          case 106: break;
          case 5: 
            { return symbol(TokenKind.IDENTIFIER, yytext());
            } 
            // fall through
          case 107: break;
          case 6: 
            { return symbol(TokenKind.INTEGER_LITERAL, yytext());
            } 
            // fall through
          case 108: break;
          case 7: 
            { return symbol(TokenKind.LPAREN);
            } 
            // fall through
          case 109: break;
          case 8: 
            { return symbol(TokenKind.RPAREN);
            } 
            // fall through
          case 110: break;
          case 9: 
            { return symbol(TokenKind.LBRACE);
            } 
            // fall through
          case 111: break;
          case 10: 
            { return symbol(TokenKind.RBRACE);
            } 
            // fall through
          case 112: break;
          case 11: 
            { return symbol(TokenKind.LBRACK);
            } 
            // fall through
          case 113: break;
          case 12: 
            { return symbol(TokenKind.RBRACK);
            } 
            // fall through
          case 114: break;
          case 13: 
            { return symbol(TokenKind.SEMICOLON);
            } 
            // fall through
          case 115: break;
          case 14: 
            { return symbol(TokenKind.COMMA);
            } 
            // fall through
          case 116: break;
          case 15: 
            { return symbol(TokenKind.DOT);
            } 
            // fall through
          case 117: break;
          case 16: 
            { return symbol(TokenKind.EQ);
            } 
            // fall through
          case 118: break;
          case 17: 
            { return symbol(TokenKind.GT);
            } 
            // fall through
          case 119: break;
          case 18: 
            { return symbol(TokenKind.LT);
            } 
            // fall through
          case 120: break;
          case 19: 
            { return symbol(TokenKind.NOT);
            } 
            // fall through
          case 121: break;
          case 20: 
            { return symbol(TokenKind.COMP);
            } 
            // fall through
          case 122: break;
          case 21: 
            { return symbol(TokenKind.QUESTION);
            } 
            // fall through
          case 123: break;
          case 22: 
            { return symbol(TokenKind.COLON);
            } 
            // fall through
          case 124: break;
          case 23: 
            { return symbol(TokenKind.AND);
            } 
            // fall through
          case 125: break;
          case 24: 
            { return symbol(TokenKind.OR);
            } 
            // fall through
          case 126: break;
          case 25: 
            { return symbol(TokenKind.PLUS);
            } 
            // fall through
          case 127: break;
          case 26: 
            { return symbol(TokenKind.MINUS);
            } 
            // fall through
          case 128: break;
          case 27: 
            { return symbol(TokenKind.XOR);
            } 
            // fall through
          case 129: break;
          case 28: 
            { return symbol(TokenKind.MOD);
            } 
            // fall through
          case 130: break;
          case 29: 
            { return symbol(TokenKind.DIVEQ);
            } 
            // fall through
          case 131: break;
          case 30: 
            { return symbol(TokenKind.MULTEQ);
            } 
            // fall through
          case 132: break;
          case 31: 
            { return symbol(TokenKind.IF);
            } 
            // fall through
          case 133: break;
          case 32: 
            { return symbol(TokenKind.DO);
            } 
            // fall through
          case 134: break;
          case 33: 
            { return symbol(TokenKind.EQEQ);
            } 
            // fall through
          case 135: break;
          case 34: 
            { return symbol(TokenKind.GTEQ);
            } 
            // fall through
          case 136: break;
          case 35: 
            { return symbol(TokenKind.RSHIFT);
            } 
            // fall through
          case 137: break;
          case 36: 
            { return symbol(TokenKind.LTEQ);
            } 
            // fall through
          case 138: break;
          case 37: 
            { return symbol(TokenKind.LSHIFT);
            } 
            // fall through
          case 139: break;
          case 38: 
            { return symbol(TokenKind.NOTEQ);
            } 
            // fall through
          case 140: break;
          case 39: 
            { return symbol(TokenKind.ANDEQ);
            } 
            // fall through
          case 141: break;
          case 40: 
            { return symbol(TokenKind.ANDAND);
            } 
            // fall through
          case 142: break;
          case 41: 
            { return symbol(TokenKind.OREQ);
            } 
            // fall through
          case 143: break;
          case 42: 
            { return symbol(TokenKind.OROR);
            } 
            // fall through
          case 144: break;
          case 43: 
            { return symbol(TokenKind.PLUSEQ);
            } 
            // fall through
          case 145: break;
          case 44: 
            { return symbol(TokenKind.PLUSPLUS);
            } 
            // fall through
          case 146: break;
          case 45: 
            { return symbol(TokenKind.MINUSEQ);
            } 
            // fall through
          case 147: break;
          case 46: 
            { return symbol(TokenKind.MINUSMINUS);
            } 
            // fall through
          case 148: break;
          case 47: 
            { return symbol(TokenKind.XOREQ);
            } 
            // fall through
          case 149: break;
          case 48: 
            { return symbol(TokenKind.MODEQ);
            } 
            // fall through
          case 150: break;
          case 49: 
            { return symbol(TokenKind.TRY);
            } 
            // fall through
          case 151: break;
          case 50: 
            { return symbol(TokenKind.NEW);
            } 
            // fall through
          case 152: break;
          case 51: 
            { return symbol(TokenKind.INT);
            } 
            // fall through
          case 153: break;
          case 52: 
            { return symbol(TokenKind.FOR);
            } 
            // fall through
          case 154: break;
          case 53: 
            { return symbol(TokenKind.RSHIFTEQ);
            } 
            // fall through
          case 155: break;
          case 54: 
            { return symbol(TokenKind.URSHIFT);
            } 
            // fall through
          case 156: break;
          case 55: 
            { return symbol(TokenKind.LSHIFTEQ);
            } 
            // fall through
          case 157: break;
          case 56: 
            { return symbol(TokenKind.BYTE);
            } 
            // fall through
          case 158: break;
          case 57: 
            { return symbol(TokenKind.BOOLEANTRUE);
            } 
            // fall through
          case 159: break;
          case 58: 
            { return symbol(TokenKind.THIS);
            } 
            // fall through
          case 160: break;
          case 59: 
            { return symbol(TokenKind.CASE);
            } 
            // fall through
          case 161: break;
          case 60: 
            { return symbol(TokenKind.CHAR);
            } 
            // fall through
          case 162: break;
          case 61: 
            { return symbol(TokenKind.LONG);
            } 
            // fall through
          case 163: break;
          case 62: 
            { return symbol(TokenKind.ELSE);
            } 
            // fall through
          case 164: break;
          case 63: 
            { return symbol(TokenKind.NULL_LITERAL);
            } 
            // fall through
          case 165: break;
          case 64: 
            { return symbol(TokenKind.GOTO);
            } 
            // fall through
          case 166: break;
          case 65: 
            { return symbol(TokenKind.VOID);
            } 
            // fall through
          case 167: break;
          case 66: 
            { return symbol(TokenKind.URSHIFTEQ);
            } 
            // fall through
          case 168: break;
          case 67: 
            { return symbol(TokenKind.BREAK);
            } 
            // fall through
          case 169: break;
          case 68: 
            { return symbol(TokenKind.SHORT);
            } 
            // fall through
          case 170: break;
          case 69: 
            { return symbol(TokenKind.SUPER);
            } 
            // fall through
          case 171: break;
          case 70: 
            { return symbol(TokenKind.THROW);
            } 
            // fall through
          case 172: break;
          case 71: 
            { return symbol(TokenKind.CATCH);
            } 
            // fall through
          case 173: break;
          case 72: 
            { return symbol(TokenKind.CONST);
            } 
            // fall through
          case 174: break;
          case 73: 
            { return symbol(TokenKind.CLASS);
            } 
            // fall through
          case 175: break;
          case 74: 
            { return symbol(TokenKind.BOOLEANFALSE);
            } 
            // fall through
          case 176: break;
          case 75: 
            { return symbol(TokenKind.FLOAT);
            } 
            // fall through
          case 177: break;
          case 76: 
            { return symbol(TokenKind.FINAL);
            } 
            // fall through
          case 178: break;
          case 77: 
            { return symbol(TokenKind.WHILE);
            } 
            // fall through
          case 179: break;
          case 78: 
            { return symbol(TokenKind.STATIC);
            } 
            // fall through
          case 180: break;
          case 79: 
            { return symbol(TokenKind.SWITCH);
            } 
            // fall through
          case 181: break;
          case 80: 
            { return symbol(TokenKind.THROWS);
            } 
            // fall through
          case 182: break;
          case 81: 
            { return symbol(TokenKind.RETURN);
            } 
            // fall through
          case 183: break;
          case 82: 
            { return symbol(TokenKind.NATIVE);
            } 
            // fall through
          case 184: break;
          case 83: 
            { return symbol(TokenKind.IMPORT);
            } 
            // fall through
          case 185: break;
          case 84: 
            { return symbol(TokenKind.DOUBLE);
            } 
            // fall through
          case 186: break;
          case 85: 
            { return symbol(TokenKind.PUBLIC);
            } 
            // fall through
          case 187: break;
          case 86: 
            { return symbol(TokenKind.STRING);
            } 
            // fall through
          case 188: break;
          case 87: 
            { return symbol(TokenKind.BOOLEAN);
            } 
            // fall through
          case 189: break;
          case 88: 
            { return symbol(TokenKind.EXTENDS);
            } 
            // fall through
          case 190: break;
          case 89: 
            { return symbol(TokenKind.DEFAULT);
            } 
            // fall through
          case 191: break;
          case 90: 
            { return symbol(TokenKind.FINALLY);
            } 
            // fall through
          case 192: break;
          case 91: 
            { return symbol(TokenKind.PACKAGE);
            } 
            // fall through
          case 193: break;
          case 92: 
            { return symbol(TokenKind.PRIVATE);
            } 
            // fall through
          case 194: break;
          case 93: 
            { return symbol(TokenKind.ABSTRACT);
            } 
            // fall through
          case 195: break;
          case 94: 
            { return symbol(TokenKind.STRICTFP);
            } 
            // fall through
          case 196: break;
          case 95: 
            { return symbol(TokenKind.CONTINUE);
            } 
            // fall through
          case 197: break;
          case 96: 
            { return symbol(TokenKind.VOLATILE);
            } 
            // fall through
          case 198: break;
          case 97: 
            { return symbol(TokenKind.TRANSIENT);
            } 
            // fall through
          case 199: break;
          case 98: 
            { return symbol(TokenKind.INTERFACE);
            } 
            // fall through
          case 200: break;
          case 99: 
            { return symbol(TokenKind.PROTECTED);
            } 
            // fall through
          case 201: break;
          case 100: 
            { return symbol(TokenKind.INSTANCEOF);
            } 
            // fall through
          case 202: break;
          case 101: 
            { return symbol(TokenKind.IMPLEMENTS);
            } 
            // fall through
          case 203: break;
          case 102: 
            { return symbol(TokenKind.SYNCHRONIZED);
            } 
            // fall through
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
