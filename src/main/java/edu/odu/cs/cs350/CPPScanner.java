package edu.odu.cs.cs350;
@SuppressWarnings("unused")


/**
 * Scanner for C++ files, generated with C++ specific keywords
 * 
 * This class is a scanner generated by JFlex 1.7.0
 */

public class CPPScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\60"+
    "\2\0\1\6\1\70\1\63\1\0\1\44\1\45\1\5\1\65\1\53"+
    "\1\66\1\54\1\4\1\10\11\10\1\37\1\52\1\57\1\55\1\56"+
    "\1\62\1\0\32\6\1\50\1\0\1\51\1\67\1\11\1\0\1\12"+
    "\1\33\1\27\1\22\1\23\1\21\1\15\1\36\1\14\1\6\1\35"+
    "\1\13\1\25\1\16\1\20\1\31\1\24\1\34\1\17\1\26\1\32"+
    "\1\40\1\41\1\30\1\42\1\43\1\46\1\64\1\47\1\61\41\7"+
    "\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6"+
    "\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6"+
    "\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6\1\0"+
    "\46\6\2\0\1\6\6\0\51\6\6\0\1\6\1\0\55\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\4\0"+
    "\4\6\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7\3\0"+
    "\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6"+
    "\16\0\12\7\41\6\11\7\2\6\4\0\1\6\2\0\1\7\30\6"+
    "\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7"+
    "\4\0\13\6\65\0\25\6\1\0\10\6\25\0\61\7\66\6\3\7"+
    "\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0\20\6"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\4\6\7\0\2\6\1\0\1\7\2\0\3\7\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7"+
    "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\7\0\1\6\6\7\1\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7"+
    "\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7"+
    "\11\0\1\6\6\0\5\7\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\1\0\3\6\5\0\2\6\2\7\2\0\12\7\20\0\1\6\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\15\0"+
    "\4\7\1\0\10\6\1\0\3\6\1\0\51\6\2\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\1\6\5\0\3\6\1\7\7\0\3\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0"+
    "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7"+
    "\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6"+
    "\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7"+
    "\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
    "\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6"+
    "\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\7\13\0"+
    "\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0"+
    "\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0"+
    "\12\7\41\0\4\7\1\0\12\7\6\0\131\6\7\0\5\6\2\7"+
    "\42\6\1\7\1\6\5\0\106\6\12\0\37\6\1\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\32\6"+
    "\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7"+
    "\2\0\13\7\6\0\12\7\15\0\1\6\10\0\16\7\102\0\5\7"+
    "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6"+
    "\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7"+
    "\3\0\3\6\12\7\44\6\2\0\11\6\7\0\53\6\2\0\3\6"+
    "\20\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\3\7"+
    "\6\0\300\6\72\7\1\0\5\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\5\7\1\0\12\7\1\0\1\6\15\0\1\6\20\0\15\6"+
    "\3\0\40\6\20\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6"+
    "\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0"+
    "\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6"+
    "\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0\53\6"+
    "\1\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51f0\6"+
    "\20\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6"+
    "\24\0\57\6\1\7\4\0\12\7\1\0\37\6\2\7\120\6\2\7"+
    "\45\0\11\6\2\0\147\6\2\0\57\6\75\0\13\6\1\7\3\6"+
    "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"+
    "\2\7\62\6\22\7\12\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\1\0\2\6\13\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6"+
    "\3\0\4\7\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7"+
    "\12\6\12\7\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7"+
    "\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0"+
    "\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0"+
    "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0"+
    "\12\6\12\0\163\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\20\7"+
    "\3\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6"+
    "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6"+
    "\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6"+
    "\17\0\1\7\37\0\40\6\15\0\36\6\5\0\46\6\5\7\5\0"+
    "\36\6\2\0\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0"+
    "\12\7\6\0\44\6\4\0\44\6\4\0\50\6\10\0\64\6\234\0"+
    "\u0137\6\11\0\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0"+
    "\54\6\1\0\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0"+
    "\37\6\101\0\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0"+
    "\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7"+
    "\4\6\1\0\3\6\1\0\35\6\2\0\3\7\4\0\1\7\40\0"+
    "\35\6\3\0\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6"+
    "\12\0\26\6\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6"+
    "\15\0\63\6\15\0\44\6\4\7\10\0\12\7\u01c6\0\35\6\12\0"+
    "\1\6\10\0\26\6\13\7\257\0\3\7\65\6\17\7\37\0\12\7"+
    "\17\0\4\7\55\6\13\7\2\0\1\7\17\0\1\7\2\0\31\6"+
    "\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7\4\0\1\6"+
    "\2\7\11\0\43\6\1\7\2\0\1\6\11\0\3\7\60\6\16\7"+
    "\4\6\4\0\4\7\3\0\12\7\1\6\1\0\1\6\43\0\22\6"+
    "\1\0\31\6\14\7\6\0\1\7\101\0\7\6\1\0\1\6\1\0"+
    "\4\6\1\0\17\6\1\0\12\6\7\0\57\6\14\7\5\0\12\7"+
    "\6\0\4\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\1\0\2\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\2\0\1\6\6\0\1\7\5\0\5\6\2\7\2\0"+
    "\7\7\3\0\5\7\213\0\65\6\22\7\4\6\5\0\12\7\4\0"+
    "\1\7\41\0\60\6\24\7\2\6\1\0\1\6\10\0\12\7\246\0"+
    "\57\6\7\7\2\0\11\7\27\0\4\6\2\7\42\0\60\6\21\7"+
    "\3\0\1\6\13\0\12\7\46\0\53\6\15\7\10\0\12\7\66\0"+
    "\33\6\2\0\17\7\4\0\12\7\306\0\54\6\17\7\145\0\100\6"+
    "\12\7\25\0\1\6\u0100\0\1\6\12\7\50\6\7\7\1\6\4\7"+
    "\10\0\1\7\10\0\1\6\13\7\50\6\2\0\4\6\20\7\3\0"+
    "\1\6\42\0\71\6\u0107\0\11\6\1\0\45\6\10\7\1\0\10\7"+
    "\1\6\17\0\12\7\30\0\36\6\2\0\26\7\1\0\16\7\111\0"+
    "\7\6\1\0\2\6\1\0\46\6\6\7\3\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\6\1\7\10\0\12\7\6\0\6\6\1\0\2\6"+
    "\1\0\40\6\5\7\1\0\2\7\1\0\5\7\1\6\7\0\12\7"+
    "\u0136\0\23\6\4\7\u0109\0\u039a\6\146\0\157\6\21\0\304\6\u0abc\0"+
    "\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0\37\6\1\0\12\7\146\0"+
    "\36\6\2\0\5\7\13\0\60\6\7\7\11\0\4\6\14\0\12\7"+
    "\11\0\25\6\5\0\23\6\u02b0\0\100\6\200\0\105\6\13\0\1\6"+
    "\56\7\20\0\4\7\15\6\100\0\2\6\36\0\u17f2\6\16\0\u02f3\6"+
    "\u250d\0\u011f\6\121\0\u018c\6\u0904\0\153\6\5\0\15\6\3\0\11\6"+
    "\7\0\12\6\3\0\2\7\1\0\4\7\u14c1\0\5\7\3\0\26\7"+
    "\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6"+
    "\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6"+
    "\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6"+
    "\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6"+
    "\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u0200\0\67\7"+
    "\4\0\62\7\10\0\1\7\16\0\1\7\26\0\5\7\1\0\17\7"+
    "\u0550\0\7\7\1\0\21\7\2\0\7\7\1\0\2\7\1\0\5\7"+
    "\u07d5\0\305\6\13\0\7\7\51\0\104\6\7\7\5\0\12\7\u0356\0"+
    "\1\6\u014f\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0"+
    "\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0"+
    "\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0"+
    "\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0"+
    "\u1035\6\13\0\336\6\2\0\u1682\6\16\0\u1d31\6\u0c1f\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\1\3\1\4\1\5\1\6\23\5"+
    "\1\7\2\5\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\1"+
    "\1\0\1\35\1\36\1\0\13\5\1\37\17\5\1\30"+
    "\6\5\1\40\40\5\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\2\0\2\5\1\27\1\61\6\5"+
    "\1\62\1\5\1\63\5\5\1\64\4\5\1\65\14\5"+
    "\1\66\15\5\1\67\4\5\1\70\6\5\1\71\6\5"+
    "\1\33\25\5\1\72\1\73\1\74\1\0\1\1\4\5"+
    "\1\75\1\5\1\76\1\77\6\5\1\100\2\5\1\101"+
    "\6\5\1\0\25\5\1\102\1\103\7\5\1\104\1\105"+
    "\3\5\1\106\11\5\1\107\1\110\15\5\1\111\10\5"+
    "\1\112\2\5\1\113\4\5\1\114\15\5\1\115\1\5"+
    "\1\0\3\5\1\116\4\5\1\51\1\117\1\120\7\5"+
    "\1\121\5\5\1\122\3\5\1\123\4\5\1\124\1\125"+
    "\3\5\1\126\2\5\1\127\5\5\1\130\2\5\1\131"+
    "\3\5\1\132\1\133\10\5\1\134\3\5\1\47\1\5"+
    "\1\135\1\5\1\136\6\5\1\137\1\140\1\5\1\141"+
    "\1\5\14\0\1\142\1\5\1\143\1\144\6\5\1\145"+
    "\1\146\1\147\3\5\1\150\1\5\1\151\1\152\3\5"+
    "\1\153\11\5\1\154\1\57\1\155\5\5\1\156\1\157"+
    "\4\5\1\160\3\5\1\161\1\162\2\5\1\163\1\5"+
    "\1\164\3\5\1\165\1\166\2\5\27\0\2\5\1\167"+
    "\1\5\1\170\2\5\1\171\3\5\1\172\3\5\1\173"+
    "\7\5\1\174\1\175\3\5\1\176\4\5\1\177\5\5"+
    "\1\200\1\201\1\5\1\202\3\5\4\0\1\63\3\0"+
    "\1\65\11\0\1\67\1\0\1\71\5\0\2\5\1\203"+
    "\2\5\1\204\1\5\1\205\1\206\1\5\1\207\1\210"+
    "\1\5\1\211\3\5\1\212\1\5\1\213\2\5\1\214"+
    "\1\215\1\216\1\217\1\220\1\221\3\5\1\222\2\5"+
    "\1\223\2\0\1\76\21\0\1\107\4\0\1\224\5\5"+
    "\1\225\1\5\1\226\1\227\1\230\7\5\1\0\1\114"+
    "\6\0\1\115\7\0\1\121\1\122\5\0\2\5\1\231"+
    "\2\5\1\232\6\5\1\233\2\0\1\136\5\0\1\142"+
    "\5\0\1\152\1\154\2\0\1\157\13\5\1\0\1\163"+
    "\1\0\1\164\1\0\1\166\2\0\1\167\1\170\3\0"+
    "\1\176\1\234\1\235\1\236\1\237\4\5\1\240\1\241"+
    "\1\242\1\0\1\200\1\201\5\0\1\243\1\244\2\5"+
    "\1\221\1\223\1\224\3\0\1\5\1\245\1\0\1\231"+
    "\1\0\1\5\3\0\1\246\1\235\2\0\1\243\1\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[814];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\71\0\u05ca\0\u0603\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\71\0\71\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\71\0\71\0\u0156"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u011d\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\71\0\71\0\u179a\0\71\0\u17d3"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u011d\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u011d"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u011d"+
    "\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u011d\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u011d"+
    "\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u011d\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u011d\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9"+
    "\0\71\0\u2b32\0\71\0\u2b6b\0\u180c\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\u011d\0\u2c88\0\u011d\0\u011d\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u011d\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252"+
    "\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a"+
    "\0\u3453\0\u348c\0\u34c5\0\u011d\0\u011d\0\u34fe\0\u3537\0\u3570"+
    "\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u011d\0\u011d\0\u368d\0\u36c6"+
    "\0\u36ff\0\u011d\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855"+
    "\0\u388e\0\u38c7\0\u3900\0\u011d\0\u011d\0\u3939\0\u3972\0\u39ab"+
    "\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u011d\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02"+
    "\0\u3d3b\0\u3d74\0\u3dad\0\u011d\0\u3de6\0\u3e1f\0\71\0\u3e58"+
    "\0\u3e91\0\u3eca\0\u3f03\0\u011d\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7"+
    "\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af"+
    "\0\u41e8\0\u011d\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u011d"+
    "\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u011d\0\u011d\0\u011d\0\u4422"+
    "\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578\0\u011d\0\u45b1"+
    "\0\u45ea\0\u4623\0\u465c\0\u4695\0\u011d\0\u46ce\0\u4707\0\u4740"+
    "\0\u011d\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u011d\0\u011d\0\u485d"+
    "\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u011d\0\u49b3\0\u49ec"+
    "\0\u4a25\0\u4a5e\0\u4a97\0\u011d\0\u4ad0\0\u4b09\0\u011d\0\u4b42"+
    "\0\u4b7b\0\u4bb4\0\u011d\0\u011d\0\u4bed\0\u4c26\0\u4c5f\0\u4c98"+
    "\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u011d\0\u4db5\0\u4dee\0\u4e27"+
    "\0\u011d\0\u4e60\0\u011d\0\u4e99\0\u011d\0\u4ed2\0\u4f0b\0\u4f44"+
    "\0\u4f7d\0\u4fb6\0\u4fef\0\u011d\0\u011d\0\u5028\0\u5061\0\u509a"+
    "\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262"+
    "\0\u529b\0\u52d4\0\u530d\0\u5346\0\u011d\0\u537f\0\u011d\0\u011d"+
    "\0\u53b8\0\u53f1\0\u542a\0\u5463\0\u549c\0\u54d5\0\u011d\0\u011d"+
    "\0\u011d\0\u550e\0\u5547\0\u5580\0\u011d\0\u55b9\0\u011d\0\u011d"+
    "\0\u55f2\0\u562b\0\u5664\0\u011d\0\u569d\0\u56d6\0\u570f\0\u5748"+
    "\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u011d\0\u011d\0\u011d"+
    "\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982\0\u011d\0\u011d\0\u59bb"+
    "\0\u59f4\0\u5a2d\0\u5a66\0\u011d\0\u5a9f\0\u5ad8\0\u5b11\0\u011d"+
    "\0\u011d\0\u5b4a\0\u5b83\0\u011d\0\u5bbc\0\u011d\0\u5bf5\0\u5c2e"+
    "\0\u5c67\0\u011d\0\u011d\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84"+
    "\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda\0\u5f13\0\u5f4c"+
    "\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069\0\u60a2\0\u60db\0\u6114"+
    "\0\u614d\0\u6186\0\u61bf\0\u61f8\0\u6231\0\u626a\0\u011d\0\u62a3"+
    "\0\u011d\0\u62dc\0\u6315\0\u011d\0\u634e\0\u6387\0\u63c0\0\u011d"+
    "\0\u63f9\0\u6432\0\u646b\0\u011d\0\u64a4\0\u64dd\0\u6516\0\u654f"+
    "\0\u6588\0\u65c1\0\u65fa\0\u011d\0\u011d\0\u6633\0\u666c\0\u66a5"+
    "\0\u011d\0\u66de\0\u6717\0\u6750\0\u6789\0\u011d\0\u67c2\0\u67fb"+
    "\0\u6834\0\u686d\0\u68a6\0\u011d\0\u011d\0\u68df\0\u011d\0\u6918"+
    "\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0"+
    "\0\u6b19\0\u6b52\0\71\0\u6b8b\0\u6bc4\0\u6bfd\0\u6c36\0\u6c6f"+
    "\0\u6ca8\0\u6ce1\0\u6d1a\0\u6d53\0\71\0\u6d8c\0\71\0\u6dc5"+
    "\0\u6dfe\0\u6e37\0\u6e70\0\u6ea9\0\u6ee2\0\u6f1b\0\u011d\0\u6f54"+
    "\0\u6f8d\0\u011d\0\u6fc6\0\u011d\0\u011d\0\u6fff\0\u011d\0\u011d"+
    "\0\u7038\0\u011d\0\u7071\0\u70aa\0\u70e3\0\u011d\0\u711c\0\u011d"+
    "\0\u7155\0\u718e\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u71c7\0\u7200\0\u7239\0\u011d\0\u7272\0\u72ab\0\u011d\0\u72e4"+
    "\0\u731d\0\71\0\u7356\0\u738f\0\u73c8\0\u7401\0\u743a\0\u7473"+
    "\0\u74ac\0\u74e5\0\u751e\0\u7557\0\u7590\0\u75c9\0\u7602\0\u763b"+
    "\0\u7674\0\u76ad\0\u76e6\0\71\0\u771f\0\u7758\0\u7791\0\u77ca"+
    "\0\u011d\0\u7803\0\u783c\0\u7875\0\u78ae\0\u78e7\0\u011d\0\u7920"+
    "\0\u011d\0\u011d\0\u011d\0\u7959\0\u7992\0\u79cb\0\u7a04\0\u7a3d"+
    "\0\u7a76\0\u7aaf\0\u7ae8\0\71\0\u7b21\0\u7b5a\0\u7b93\0\u7bcc"+
    "\0\u7c05\0\u7c3e\0\71\0\u7c77\0\u7cb0\0\u7ce9\0\u7d22\0\u7d5b"+
    "\0\u7d94\0\u7dcd\0\71\0\71\0\u7e06\0\u7e3f\0\u7e78\0\u7eb1"+
    "\0\u7eea\0\u7f23\0\u7f5c\0\u011d\0\u7f95\0\u7fce\0\u011d\0\u8007"+
    "\0\u8040\0\u8079\0\u80b2\0\u80eb\0\u8124\0\u011d\0\u815d\0\u8196"+
    "\0\71\0\u81cf\0\u8208\0\u8241\0\u827a\0\u82b3\0\71\0\u82ec"+
    "\0\u8325\0\u835e\0\u8397\0\u83d0\0\71\0\71\0\u8409\0\u8442"+
    "\0\71\0\u847b\0\u84b4\0\u84ed\0\u8526\0\u855f\0\u8598\0\u85d1"+
    "\0\u860a\0\u8643\0\u867c\0\u86b5\0\u86ee\0\71\0\u8727\0\71"+
    "\0\u8760\0\71\0\u8799\0\u87d2\0\71\0\71\0\u880b\0\u8844"+
    "\0\u887d\0\71\0\u011d\0\u011d\0\u011d\0\u011d\0\u88b6\0\u88ef"+
    "\0\u8928\0\u8961\0\u011d\0\u011d\0\u011d\0\u899a\0\71\0\71"+
    "\0\u89d3\0\u8a0c\0\u8a45\0\u8a7e\0\u8ab7\0\u011d\0\u011d\0\u8af0"+
    "\0\u8b29\0\71\0\71\0\71\0\u8b62\0\u8b9b\0\u8bd4\0\u8c0d"+
    "\0\u011d\0\u8c46\0\71\0\u8c7f\0\u8cb8\0\u8cf1\0\u8d2a\0\u8d63"+
    "\0\u011d\0\71\0\u8d9c\0\u8dd5\0\71\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[814];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\7\1\34\1\35\1\36"+
    "\2\7\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\73\0\1\4"+
    "\72\0\1\64\1\65\47\0\1\66\70\0\1\67\21\0"+
    "\31\7\1\0\4\7\35\0\1\10\1\70\65\0\5\7"+
    "\1\71\2\7\1\72\1\73\6\7\1\74\3\7\1\75"+
    "\1\7\1\76\2\7\1\0\4\7\33\0\6\7\1\77"+
    "\3\7\1\100\16\7\1\0\4\7\33\0\10\7\1\101"+
    "\1\102\1\103\1\104\4\7\1\105\10\7\1\0\4\7"+
    "\33\0\12\7\1\106\16\7\1\0\4\7\33\0\4\7"+
    "\1\107\5\7\1\110\2\7\1\111\6\7\1\112\4\7"+
    "\1\0\4\7\33\0\6\7\1\113\2\7\1\114\3\7"+
    "\1\115\2\7\1\116\7\7\1\117\1\0\1\7\1\120"+
    "\1\121\1\7\33\0\11\7\1\122\11\7\1\123\2\7"+
    "\1\124\2\7\1\0\4\7\33\0\4\7\1\125\1\126"+
    "\3\7\1\127\1\130\11\7\1\131\1\7\1\132\2\7"+
    "\1\0\4\7\33\0\12\7\1\133\2\7\1\134\13\7"+
    "\1\0\2\7\1\135\1\7\33\0\5\7\1\136\2\7"+
    "\1\137\11\7\1\140\6\7\1\0\4\7\33\0\24\7"+
    "\1\141\4\7\1\0\4\7\33\0\4\7\1\142\10\7"+
    "\1\143\6\7\1\144\4\7\1\0\4\7\33\0\15\7"+
    "\1\145\10\7\1\146\1\7\1\147\1\0\2\7\1\150"+
    "\1\7\33\0\4\7\1\151\1\152\1\153\3\7\1\154"+
    "\15\7\1\155\1\0\4\7\33\0\12\7\1\156\16\7"+
    "\1\0\4\7\33\0\24\7\1\157\1\7\1\160\2\7"+
    "\1\0\4\7\33\0\10\7\1\161\1\162\6\7\1\163"+
    "\10\7\1\0\4\7\33\0\6\7\1\164\3\7\1\165"+
    "\13\7\1\166\2\7\1\0\4\7\33\0\15\7\1\167"+
    "\13\7\1\0\4\7\33\0\6\7\1\170\3\7\1\171"+
    "\16\7\1\0\4\7\33\0\21\7\1\172\6\7\1\173"+
    "\1\0\4\7\102\0\1\174\70\0\1\175\1\176\67\0"+
    "\1\177\1\0\1\200\66\0\1\201\70\0\1\202\5\0"+
    "\1\203\62\0\1\204\6\0\1\205\61\0\1\206\7\0"+
    "\1\207\60\0\1\210\10\0\1\211\57\0\1\212\70\0"+
    "\1\213\13\0\1\64\1\3\1\4\66\64\5\214\1\215"+
    "\63\214\6\0\6\7\1\216\1\217\21\7\1\0\4\7"+
    "\33\0\14\7\1\220\14\7\1\0\4\7\33\0\17\7"+
    "\1\221\11\7\1\0\4\7\33\0\12\7\1\222\16\7"+
    "\1\0\4\7\33\0\20\7\1\223\10\7\1\0\4\7"+
    "\33\0\26\7\1\224\2\7\1\0\4\7\33\0\11\7"+
    "\1\225\17\7\1\0\4\7\33\0\10\7\1\226\20\7"+
    "\1\0\4\7\33\0\5\7\1\227\12\7\1\230\10\7"+
    "\1\0\4\7\33\0\20\7\1\231\10\7\1\0\4\7"+
    "\33\0\11\7\1\232\5\7\1\233\11\7\1\0\4\7"+
    "\33\0\15\7\1\234\13\7\1\0\4\7\33\0\20\7"+
    "\1\235\10\7\1\0\4\7\33\0\17\7\1\236\11\7"+
    "\1\0\4\7\33\0\15\7\1\237\13\7\1\0\4\7"+
    "\33\0\31\7\1\0\1\7\1\240\2\7\33\0\5\7"+
    "\1\241\23\7\1\0\4\7\33\0\7\7\1\242\21\7"+
    "\1\0\3\7\1\243\33\0\20\7\1\244\10\7\1\0"+
    "\4\7\33\0\20\7\1\245\10\7\1\0\4\7\33\0"+
    "\4\7\1\246\7\7\1\247\11\7\1\250\2\7\1\0"+
    "\4\7\33\0\12\7\1\251\16\7\1\0\4\7\33\0"+
    "\6\7\1\252\22\7\1\0\4\7\33\0\10\7\1\253"+
    "\20\7\1\0\4\7\33\0\20\7\1\254\10\7\1\0"+
    "\4\7\33\0\15\7\1\255\13\7\1\0\4\7\33\0"+
    "\3\7\1\256\25\7\1\0\4\7\33\0\5\7\1\257"+
    "\23\7\1\0\4\7\33\0\12\7\1\260\16\7\1\0"+
    "\4\7\33\0\20\7\1\261\10\7\1\0\4\7\33\0"+
    "\26\7\1\262\2\7\1\0\4\7\33\0\10\7\1\263"+
    "\20\7\1\0\4\7\33\0\6\7\1\264\22\7\1\0"+
    "\4\7\33\0\24\7\1\265\4\7\1\0\4\7\33\0"+
    "\5\7\1\266\5\7\1\267\2\7\1\270\2\7\1\271"+
    "\7\7\1\0\4\7\33\0\10\7\1\272\20\7\1\0"+
    "\4\7\33\0\11\7\1\273\17\7\1\0\4\7\33\0"+
    "\24\7\1\274\4\7\1\0\4\7\33\0\20\7\1\275"+
    "\2\7\1\276\5\7\1\0\4\7\33\0\15\7\1\277"+
    "\13\7\1\0\4\7\33\0\23\7\1\300\5\7\1\0"+
    "\4\7\33\0\17\7\1\301\11\7\1\0\4\7\33\0"+
    "\20\7\1\302\10\7\1\0\4\7\33\0\17\7\1\303"+
    "\11\7\1\0\4\7\33\0\24\7\1\304\4\7\1\0"+
    "\2\7\1\305\1\7\33\0\6\7\1\306\17\7\1\307"+
    "\2\7\1\0\4\7\33\0\23\7\1\310\5\7\1\0"+
    "\4\7\33\0\11\7\1\311\6\7\1\312\10\7\1\0"+
    "\4\7\33\0\4\7\1\313\24\7\1\0\4\7\33\0"+
    "\10\7\1\314\20\7\1\0\4\7\33\0\3\7\1\315"+
    "\4\7\1\316\6\7\1\317\4\7\1\320\4\7\1\0"+
    "\4\7\33\0\4\7\1\321\21\7\1\322\2\7\1\0"+
    "\4\7\33\0\26\7\1\323\2\7\1\0\4\7\33\0"+
    "\25\7\1\324\3\7\1\0\4\7\33\0\6\7\1\325"+
    "\3\7\1\326\16\7\1\0\4\7\33\0\6\7\1\327"+
    "\2\7\1\330\1\331\16\7\1\0\4\7\33\0\6\7"+
    "\1\332\22\7\1\0\4\7\33\0\6\7\1\333\22\7"+
    "\1\0\4\7\33\0\20\7\1\334\10\7\1\0\4\7"+
    "\33\0\12\7\1\335\16\7\1\0\4\7\33\0\15\7"+
    "\1\336\13\7\1\0\4\7\33\0\6\7\1\337\1\340"+
    "\3\7\1\341\2\7\1\342\1\7\1\343\10\7\1\0"+
    "\4\7\33\0\26\7\1\344\2\7\1\0\4\7\33\0"+
    "\5\7\1\345\1\346\22\7\1\0\4\7\33\0\30\7"+
    "\1\347\1\0\4\7\33\0\6\7\1\350\22\7\1\0"+
    "\4\7\102\0\1\351\1\352\67\0\1\353\13\0\5\214"+
    "\1\354\67\214\1\355\1\354\63\214\6\0\7\7\1\356"+
    "\21\7\1\0\4\7\33\0\12\7\1\357\16\7\1\0"+
    "\4\7\33\0\3\7\1\360\25\7\1\0\4\7\33\0"+
    "\17\7\1\361\11\7\1\0\4\7\33\0\12\7\1\362"+
    "\16\7\1\0\4\7\33\0\4\7\1\363\24\7\1\0"+
    "\4\7\33\0\20\7\1\364\10\7\1\0\4\7\33\0"+
    "\7\7\1\365\21\7\1\0\4\7\33\0\6\7\1\366"+
    "\22\7\1\0\4\7\33\0\26\7\1\367\2\7\1\0"+
    "\4\7\33\0\13\7\1\370\4\7\1\371\10\7\1\0"+
    "\4\7\33\0\4\7\1\372\24\7\1\0\4\7\33\0"+
    "\26\7\1\373\2\7\1\0\4\7\33\0\12\7\1\374"+
    "\16\7\1\0\4\7\33\0\15\7\1\375\13\7\1\0"+
    "\4\7\33\0\22\7\1\376\6\7\1\0\4\7\33\0"+
    "\5\7\1\377\23\7\1\0\4\7\33\0\10\7\1\u0100"+
    "\20\7\1\0\4\7\33\0\15\7\1\u0101\13\7\1\0"+
    "\4\7\33\0\26\7\1\u0102\2\7\1\0\4\7\33\0"+
    "\20\7\1\u0103\1\u0104\7\7\1\0\4\7\33\0\15\7"+
    "\1\u0105\13\7\1\u0106\4\7\33\0\6\7\1\u0107\6\7"+
    "\1\u0108\6\7\1\u0109\4\7\1\0\4\7\33\0\26\7"+
    "\1\u010a\2\7\1\0\4\7\33\0\20\7\1\u010b\10\7"+
    "\1\0\4\7\33\0\21\7\1\u010c\7\7\1\0\4\7"+
    "\33\0\26\7\1\u010d\2\7\1\0\4\7\33\0\26\7"+
    "\1\u010e\2\7\1\0\4\7\33\0\15\7\1\u010f\13\7"+
    "\1\0\4\7\33\0\11\7\1\u0110\17\7\1\0\4\7"+
    "\33\0\4\7\1\u0111\24\7\1\0\4\7\33\0\26\7"+
    "\1\u0112\2\7\1\0\4\7\33\0\31\7\1\0\1\7"+
    "\1\u0113\2\7\33\0\21\7\1\u0114\7\7\1\0\4\7"+
    "\33\0\15\7\1\u0115\13\7\1\0\4\7\33\0\25\7"+
    "\1\u0116\3\7\1\0\4\7\33\0\15\7\1\u0117\13\7"+
    "\1\0\4\7\33\0\4\7\1\u0118\24\7\1\0\4\7"+
    "\33\0\24\7\1\u0119\4\7\1\0\4\7\33\0\5\7"+
    "\1\u011a\23\7\1\0\4\7\33\0\4\7\1\u011b\24\7"+
    "\1\0\4\7\33\0\15\7\1\u011c\13\7\1\0\4\7"+
    "\33\0\17\7\1\u011d\11\7\1\0\4\7\33\0\15\7"+
    "\1\u011e\13\7\1\0\4\7\33\0\5\7\1\u011f\4\7"+
    "\1\u0120\16\7\1\0\4\7\33\0\24\7\1\u0121\4\7"+
    "\1\0\4\7\33\0\12\7\1\u0122\16\7\1\0\4\7"+
    "\33\0\4\7\1\u0123\24\7\1\0\4\7\33\0\23\7"+
    "\1\u0124\5\7\1\0\4\7\33\0\15\7\1\u0125\13\7"+
    "\1\0\4\7\33\0\11\7\1\u0126\17\7\1\0\4\7"+
    "\33\0\12\7\1\u0127\2\7\1\u0128\13\7\1\0\4\7"+
    "\33\0\15\7\1\u0129\13\7\1\0\4\7\33\0\15\7"+
    "\1\u012a\13\7\1\0\4\7\33\0\21\7\1\u012b\7\7"+
    "\1\0\4\7\33\0\11\7\1\u012c\17\7\1\0\4\7"+
    "\33\0\4\7\1\u012d\21\7\1\u012e\2\7\1\0\2\7"+
    "\1\u012f\1\7\33\0\11\7\1\u0130\6\7\1\u0131\1\u0132"+
    "\7\7\1\0\4\7\33\0\23\7\1\u0133\5\7\1\0"+
    "\4\7\33\0\20\7\1\u0134\10\7\1\0\4\7\33\0"+
    "\26\7\1\u0135\2\7\1\0\4\7\33\0\12\7\1\u0136"+
    "\16\7\1\0\4\7\33\0\3\7\1\u0137\25\7\1\0"+
    "\4\7\33\0\5\7\1\u0138\23\7\1\0\4\7\33\0"+
    "\31\7\1\0\1\u0139\3\7\33\0\20\7\1\u013a\10\7"+
    "\1\0\4\7\33\0\12\7\1\u013b\16\7\1\0\4\7"+
    "\33\0\6\7\1\u013c\22\7\1\0\4\7\33\0\26\7"+
    "\1\u013d\2\7\1\0\4\7\33\0\10\7\1\u013e\20\7"+
    "\1\0\4\7\33\0\5\7\1\u013f\23\7\1\0\4\7"+
    "\33\0\4\7\1\u0140\4\7\1\u0141\1\u0142\16\7\1\0"+
    "\4\7\33\0\5\7\1\u0143\23\7\1\0\4\7\33\0"+
    "\4\7\1\u0144\24\7\1\0\4\7\33\0\10\7\1\u0145"+
    "\20\7\1\0\4\7\33\0\6\7\1\u0146\22\7\1\0"+
    "\4\7\33\0\5\7\1\u0147\23\7\1\0\4\7\33\0"+
    "\24\7\1\u0148\4\7\1\0\4\7\33\0\24\7\1\u0149"+
    "\4\7\1\0\4\7\33\0\20\7\1\u014a\10\7\1\0"+
    "\4\7\33\0\4\7\1\u014b\24\7\1\0\4\7\33\0"+
    "\14\7\1\u014c\14\7\1\0\4\7\33\0\4\7\1\u014d"+
    "\24\7\1\0\4\7\33\0\5\7\1\u014e\23\7\1\0"+
    "\4\7\102\0\1\u014f\13\0\4\214\1\4\1\354\63\214"+
    "\6\0\10\7\1\u0150\20\7\1\0\4\7\33\0\26\7"+
    "\1\u0151\2\7\1\0\4\7\33\0\15\7\1\u0152\13\7"+
    "\1\0\4\7\33\0\6\7\1\u0153\22\7\1\0\4\7"+
    "\33\0\31\7\1\0\2\7\1\u0154\1\7\33\0\10\7"+
    "\1\u0155\20\7\1\0\4\7\33\0\15\7\1\u0156\13\7"+
    "\1\0\4\7\33\0\31\7\1\0\1\7\1\u0157\2\7"+
    "\33\0\26\7\1\u0158\2\7\1\0\4\7\33\0\10\7"+
    "\1\u0159\20\7\1\0\4\7\33\0\4\7\1\u015a\24\7"+
    "\1\0\4\7\33\0\11\7\1\u015b\17\7\1\0\4\7"+
    "\33\0\21\7\1\u015c\7\7\1\0\4\7\33\0\23\7"+
    "\1\u015d\5\7\1\0\4\7\33\0\15\7\1\u015e\13\7"+
    "\1\0\4\7\33\0\12\7\1\u015f\16\7\1\0\4\7"+
    "\33\0\15\7\1\u0160\13\7\1\0\4\7\33\0\6\7"+
    "\1\u0161\22\7\1\0\4\7\33\0\27\7\1\u0162\1\7"+
    "\1\0\4\7\33\0\22\7\1\u0163\6\7\1\0\4\7"+
    "\64\0\1\u0164\37\0\10\7\1\u0165\20\7\1\0\4\7"+
    "\33\0\4\7\1\u0166\24\7\1\0\4\7\33\0\21\7"+
    "\1\u0167\7\7\1\0\4\7\33\0\20\7\1\u0168\10\7"+
    "\1\0\4\7\33\0\21\7\1\u0169\7\7\1\0\4\7"+
    "\33\0\30\7\1\u016a\1\0\4\7\33\0\15\7\1\u016b"+
    "\13\7\1\0\4\7\33\0\4\7\1\u016c\24\7\1\0"+
    "\4\7\33\0\16\7\1\u016d\12\7\1\0\4\7\33\0"+
    "\15\7\1\u016e\13\7\1\0\4\7\33\0\20\7\1\u016f"+
    "\10\7\1\0\4\7\33\0\15\7\1\u0170\13\7\1\0"+
    "\4\7\33\0\4\7\1\u0171\24\7\1\0\4\7\33\0"+
    "\20\7\1\u0172\10\7\1\0\4\7\33\0\10\7\1\u0173"+
    "\20\7\1\0\4\7\33\0\5\7\1\u0174\23\7\1\0"+
    "\4\7\33\0\20\7\1\u0175\10\7\1\0\4\7\33\0"+
    "\24\7\1\u0176\4\7\1\0\4\7\33\0\15\7\1\u0177"+
    "\13\7\1\0\4\7\33\0\20\7\1\u0178\10\7\1\0"+
    "\4\7\33\0\17\7\1\u0179\11\7\1\0\4\7\33\0"+
    "\26\7\1\u017a\2\7\1\0\4\7\33\0\6\7\1\u017b"+
    "\22\7\1\0\4\7\33\0\26\7\1\u017c\2\7\1\0"+
    "\4\7\33\0\15\7\1\u017d\13\7\1\0\4\7\33\0"+
    "\26\7\1\u017e\2\7\1\0\4\7\33\0\25\7\1\u017f"+
    "\3\7\1\0\4\7\33\0\5\7\1\u0180\23\7\1\0"+
    "\4\7\33\0\31\7\1\0\1\7\1\u0181\2\7\33\0"+
    "\4\7\1\u0182\24\7\1\0\4\7\33\0\6\7\1\u0183"+
    "\1\7\1\u0184\3\7\1\u0185\14\7\1\0\4\7\33\0"+
    "\30\7\1\u0186\1\0\4\7\33\0\11\7\1\u0187\17\7"+
    "\1\0\4\7\33\0\31\7\1\0\1\7\1\u0188\2\7"+
    "\33\0\15\7\1\u0189\13\7\1\0\4\7\33\0\6\7"+
    "\1\u018a\22\7\1\0\4\7\33\0\20\7\1\u018b\10\7"+
    "\1\0\4\7\33\0\6\7\1\u018c\22\7\1\0\4\7"+
    "\33\0\15\7\1\u018d\13\7\1\0\4\7\33\0\5\7"+
    "\1\u018e\23\7\1\0\4\7\33\0\10\7\1\u018f\20\7"+
    "\1\0\4\7\33\0\15\7\1\u0190\13\7\1\0\4\7"+
    "\33\0\6\7\1\u0191\22\7\1\0\4\7\33\0\4\7"+
    "\1\u0192\24\7\1\0\4\7\33\0\15\7\1\u0193\13\7"+
    "\1\0\4\7\33\0\10\7\1\u0194\20\7\1\0\4\7"+
    "\33\0\7\7\1\u0195\21\7\1\0\4\7\33\0\14\7"+
    "\1\u0196\14\7\1\0\4\7\33\0\7\7\1\u0197\21\7"+
    "\1\0\4\7\33\0\6\7\1\u0198\22\7\1\0\4\7"+
    "\33\0\10\7\1\u0199\20\7\1\0\4\7\33\0\15\7"+
    "\1\u019a\13\7\1\0\4\7\33\0\26\7\1\u019b\2\7"+
    "\1\0\4\7\33\0\27\7\1\u019c\1\7\1\0\4\7"+
    "\33\0\20\7\1\u019d\10\7\1\0\4\7\33\0\11\7"+
    "\1\u019e\17\7\1\0\4\7\33\0\15\7\1\u019f\13\7"+
    "\1\0\4\7\33\0\6\7\1\u01a0\22\7\1\0\4\7"+
    "\33\0\26\7\1\u01a1\2\7\1\0\4\7\33\0\24\7"+
    "\1\u01a2\4\7\1\0\4\7\33\0\20\7\1\u01a3\10\7"+
    "\1\0\4\7\33\0\26\7\1\u01a4\2\7\1\0\4\7"+
    "\33\0\15\7\1\u01a5\13\7\1\0\4\7\33\0\4\7"+
    "\1\u01a6\5\7\1\u01a7\16\7\1\0\4\7\33\0\6\7"+
    "\1\u01a8\22\7\1\0\4\7\33\0\16\7\1\u01a9\12\7"+
    "\1\0\4\7\33\0\21\7\1\u01aa\7\7\1\0\4\7"+
    "\33\0\15\7\1\u01ab\13\7\1\0\4\7\33\0\4\7"+
    "\1\u01ac\24\7\1\0\4\7\33\0\14\7\1\u01ad\14\7"+
    "\1\0\4\7\33\0\15\7\1\u01ae\13\7\1\0\4\7"+
    "\33\0\6\7\1\u01af\22\7\1\0\4\7\33\0\20\7"+
    "\1\u01b0\10\7\1\0\4\7\33\0\23\7\1\u01b1\5\7"+
    "\1\0\4\7\33\0\15\7\1\u01b2\13\7\1\0\4\7"+
    "\33\0\20\7\1\u01b3\10\7\1\0\4\7\33\0\14\7"+
    "\1\u01b4\14\7\1\0\4\7\33\0\13\7\1\u01b5\15\7"+
    "\1\0\4\7\33\0\4\7\1\u01b6\24\7\1\0\4\7"+
    "\33\0\21\7\1\u01b7\7\7\1\0\4\7\33\0\21\7"+
    "\1\u01b8\7\7\1\0\4\7\37\0\1\u01b9\1\u01ba\1\u01bb"+
    "\2\0\1\u01bc\1\u01bd\1\u01be\1\u01bf\1\0\1\u01c0\1\u01c1"+
    "\1\0\1\u01c2\2\0\1\u01c3\1\u01c4\43\0\7\7\1\u01c5"+
    "\21\7\1\0\4\7\33\0\17\7\1\u01c6\11\7\1\0"+
    "\4\7\33\0\20\7\1\u01c7\10\7\1\0\4\7\33\0"+
    "\30\7\1\u01c8\1\0\4\7\33\0\26\7\1\u01c9\2\7"+
    "\1\0\4\7\33\0\4\7\1\u01ca\24\7\1\0\4\7"+
    "\33\0\20\7\1\u01cb\10\7\1\0\4\7\33\0\4\7"+
    "\1\u01cc\24\7\1\0\4\7\33\0\26\7\1\u01cd\2\7"+
    "\1\0\4\7\33\0\6\7\1\u01ce\22\7\1\0\4\7"+
    "\33\0\14\7\1\u01cf\14\7\1\0\4\7\33\0\15\7"+
    "\1\u01d0\13\7\1\0\4\7\33\0\15\7\1\u01d1\13\7"+
    "\1\0\4\7\33\0\5\7\1\u01d2\23\7\1\0\4\7"+
    "\33\0\31\7\1\0\2\7\1\u01d3\1\7\33\0\6\7"+
    "\1\u01d4\22\7\1\0\4\7\33\0\10\7\1\u01d5\20\7"+
    "\1\0\4\7\33\0\21\7\1\u01d6\7\7\1\0\4\7"+
    "\33\0\20\7\1\u01d7\10\7\1\0\4\7\33\0\31\7"+
    "\1\0\2\7\1\u01d8\1\7\33\0\5\7\1\u01d9\23\7"+
    "\1\0\4\7\33\0\4\7\1\u01da\24\7\1\0\4\7"+
    "\33\0\14\7\1\u01db\14\7\1\0\4\7\33\0\14\7"+
    "\1\u01dc\14\7\1\0\4\7\33\0\4\7\1\u01dd\24\7"+
    "\1\0\4\7\33\0\15\7\1\u01de\13\7\1\0\4\7"+
    "\33\0\4\7\1\u01df\24\7\1\0\4\7\33\0\20\7"+
    "\1\u01e0\10\7\1\0\4\7\33\0\15\7\1\u01e1\13\7"+
    "\1\0\4\7\33\0\3\7\1\u01e2\11\7\1\u01e3\13\7"+
    "\1\0\4\7\33\0\10\7\1\u01e4\20\7\1\0\4\7"+
    "\33\0\23\7\1\u01e5\5\7\1\0\4\7\33\0\12\7"+
    "\1\u01e6\16\7\1\0\4\7\33\0\16\7\1\u01e7\12\7"+
    "\1\0\4\7\33\0\21\7\1\u01e8\7\7\1\0\4\7"+
    "\33\0\20\7\1\u01e9\10\7\1\0\4\7\33\0\21\7"+
    "\1\u01ea\7\7\1\0\4\7\33\0\10\7\1\u01eb\20\7"+
    "\1\0\4\7\33\0\15\7\1\u01ec\13\7\1\0\4\7"+
    "\33\0\20\7\1\u01ed\10\7\1\0\4\7\33\0\14\7"+
    "\1\u01ee\14\7\1\0\4\7\33\0\20\7\1\u01ef\10\7"+
    "\1\0\4\7\33\0\15\7\1\u01f0\13\7\1\0\4\7"+
    "\33\0\20\7\1\u01f1\10\7\1\0\4\7\33\0\22\7"+
    "\1\u01f2\6\7\1\0\4\7\33\0\26\7\1\u01f3\2\7"+
    "\1\0\4\7\33\0\10\7\1\u01f4\20\7\1\0\4\7"+
    "\33\0\4\7\1\u01f5\24\7\1\0\4\7\33\0\6\7"+
    "\1\u01f6\22\7\1\0\4\7\33\0\20\7\1\u01f7\10\7"+
    "\1\0\4\7\33\0\11\7\1\u01f8\17\7\1\0\4\7"+
    "\33\0\13\7\1\u01f9\15\7\1\0\4\7\33\0\20\7"+
    "\1\u01fa\10\7\1\0\4\7\33\0\3\7\1\u01fb\25\7"+
    "\1\0\4\7\33\0\17\7\1\u01fc\11\7\1\0\4\7"+
    "\33\0\4\7\1\u01fd\24\7\1\0\4\7\33\0\23\7"+
    "\1\u01fe\5\7\1\0\4\7\33\0\12\7\1\u01ff\16\7"+
    "\1\0\4\7\33\0\4\7\1\u0200\24\7\1\0\4\7"+
    "\33\0\23\7\1\u0201\5\7\1\0\4\7\33\0\26\7"+
    "\1\u0202\2\7\1\0\4\7\33\0\17\7\1\u0203\11\7"+
    "\1\0\4\7\33\0\3\7\1\u0204\25\7\1\0\4\7"+
    "\33\0\15\7\1\u0205\13\7\1\0\4\7\40\0\1\u0206"+
    "\20\0\1\u0207\50\0\1\u0208\73\0\1\u0209\1\u020a\5\0"+
    "\1\u020b\61\0\1\u020c\3\0\1\u020d\2\0\1\u020e\61\0"+
    "\1\u020f\70\0\1\u0210\1\u0211\11\0\1\u0212\61\0\1\u0213"+
    "\77\0\1\u0214\50\0\1\u0215\10\0\1\u0216\61\0\1\u0217"+
    "\3\0\1\u0218\15\0\1\u0219\50\0\1\u021a\7\0\1\u021b"+
    "\56\0\1\u021c\62\0\25\7\1\u021d\3\7\1\0\4\7"+
    "\33\0\12\7\1\u021e\16\7\1\0\4\7\33\0\17\7"+
    "\1\u021f\11\7\1\0\4\7\33\0\12\7\1\u0220\16\7"+
    "\1\0\4\7\33\0\17\7\1\u0221\11\7\1\0\4\7"+
    "\33\0\14\7\1\u0222\14\7\1\0\4\7\33\0\12\7"+
    "\1\u0223\16\7\1\0\4\7\33\0\20\7\1\u0224\10\7"+
    "\1\0\4\7\33\0\23\7\1\u0225\5\7\1\0\4\7"+
    "\33\0\21\7\1\u0226\7\7\1\0\4\7\33\0\6\7"+
    "\1\u0227\22\7\1\0\4\7\33\0\15\7\1\u0228\13\7"+
    "\1\0\4\7\33\0\20\7\1\u0229\10\7\1\0\4\7"+
    "\33\0\3\7\1\u022a\25\7\1\0\4\7\33\0\17\7"+
    "\1\u022b\11\7\1\0\4\7\33\0\13\7\1\u022c\15\7"+
    "\1\0\4\7\33\0\6\7\1\u022d\22\7\1\0\4\7"+
    "\33\0\24\7\1\u022e\4\7\1\0\4\7\33\0\5\7"+
    "\1\u022f\23\7\1\0\4\7\33\0\21\7\1\u0230\7\7"+
    "\1\0\4\7\33\0\22\7\1\u0231\6\7\1\0\1\u0232"+
    "\3\7\33\0\24\7\1\u0233\4\7\1\0\4\7\33\0"+
    "\20\7\1\u0234\10\7\1\0\4\7\33\0\15\7\1\u0235"+
    "\13\7\1\0\4\7\33\0\20\7\1\u0236\10\7\1\0"+
    "\4\7\33\0\15\7\1\u0237\13\7\1\0\4\7\33\0"+
    "\26\7\1\u0238\2\7\1\0\4\7\33\0\31\7\1\0"+
    "\2\7\1\u0239\1\7\33\0\26\7\1\u023a\2\7\1\0"+
    "\4\7\33\0\15\7\1\u023b\13\7\1\0\4\7\33\0"+
    "\23\7\1\u023c\5\7\1\0\4\7\33\0\15\7\1\u023d"+
    "\13\7\1\0\4\7\33\0\5\7\1\u023e\23\7\1\0"+
    "\4\7\33\0\5\7\1\u023f\23\7\1\0\4\7\33\0"+
    "\3\7\1\u0240\25\7\1\0\4\7\33\0\30\7\1\u0241"+
    "\1\0\4\7\33\0\10\7\1\u0242\10\7\1\u0243\7\7"+
    "\1\0\4\7\33\0\17\7\1\u0244\11\7\1\0\4\7"+
    "\33\0\26\7\1\u0245\2\7\1\0\4\7\33\0\21\7"+
    "\1\u0246\7\7\1\0\4\7\33\0\20\7\1\u0247\10\7"+
    "\1\0\4\7\33\0\4\7\1\u0248\14\7\1\u0249\7\7"+
    "\1\0\4\7\33\0\23\7\1\u024a\5\7\1\0\4\7"+
    "\42\0\1\u024b\107\0\1\u024c\53\0\1\u024d\77\0\1\u024e"+
    "\61\0\1\u024f\5\0\1\u0250\66\0\1\u0251\73\0\1\u0252"+
    "\70\0\1\u0253\54\0\1\u0254\7\0\1\u0255\11\0\1\u0256"+
    "\62\0\1\u0257\70\0\1\u0258\76\0\1\u0259\52\0\1\u025a"+
    "\76\0\1\u025b\67\0\1\u025c\76\0\1\u025d\64\0\1\u025e"+
    "\61\0\1\u025f\104\0\1\u0260\72\0\1\u0261\54\0\1\u0262"+
    "\64\0\1\u0263\102\0\1\u0264\50\0\24\7\1\u0265\4\7"+
    "\1\0\4\7\33\0\10\7\1\u0266\20\7\1\0\4\7"+
    "\33\0\26\7\1\u0267\2\7\1\0\4\7\33\0\3\7"+
    "\1\u0268\25\7\1\0\4\7\33\0\10\7\1\u0269\20\7"+
    "\1\0\4\7\33\0\15\7\1\u026a\13\7\1\0\4\7"+
    "\33\0\3\7\1\u026b\25\7\1\0\4\7\33\0\20\7"+
    "\1\u026c\10\7\1\0\4\7\33\0\15\7\1\u026d\13\7"+
    "\1\0\4\7\33\0\5\7\1\u026e\23\7\1\0\4\7"+
    "\33\0\15\7\1\u026f\13\7\1\0\4\7\33\0\20\7"+
    "\1\u0270\10\7\1\0\4\7\33\0\26\7\1\u0271\2\7"+
    "\1\0\4\7\33\0\14\7\1\u0272\14\7\1\0\4\7"+
    "\33\0\4\7\1\u0273\24\7\1\0\4\7\33\0\23\7"+
    "\1\u0274\5\7\1\0\4\7\33\0\4\7\1\u0275\24\7"+
    "\1\0\4\7\33\0\15\7\1\u0276\13\7\1\0\4\7"+
    "\33\0\15\7\1\u0277\13\7\1\0\4\7\33\0\14\7"+
    "\1\u0278\14\7\1\0\4\7\33\0\15\7\1\u0279\13\7"+
    "\1\0\4\7\33\0\23\7\1\u027a\5\7\1\0\4\7"+
    "\33\0\26\7\1\u027b\2\7\1\0\4\7\33\0\26\7"+
    "\1\u027c\2\7\1\0\4\7\33\0\11\7\1\u027d\17\7"+
    "\1\0\4\7\33\0\15\7\1\u027e\13\7\1\0\4\7"+
    "\33\0\20\7\1\u027f\10\7\1\0\4\7\33\0\17\7"+
    "\1\u0280\11\7\1\0\4\7\33\0\12\7\1\u0281\16\7"+
    "\1\0\4\7\33\0\4\7\1\u0282\5\7\1\u0283\16\7"+
    "\1\0\4\7\33\0\15\7\1\u0284\13\7\1\0\4\7"+
    "\33\0\11\7\1\u0285\17\7\1\0\4\7\33\0\4\7"+
    "\1\u0286\24\7\1\0\4\7\33\0\20\7\1\u0287\10\7"+
    "\1\0\4\7\45\0\1\u0288\62\0\1\u0289\104\0\1\u028a"+
    "\76\0\1\u028b\55\0\1\u028c\4\0\1\u028d\54\0\1\u028e"+
    "\112\0\1\u028f\70\0\1\u0290\63\0\1\u0291\64\0\1\u0292"+
    "\61\0\1\u0293\6\0\1\u0294\101\0\1\u0295\70\0\1\u0296"+
    "\75\0\1\u0297\56\0\1\u0298\73\0\1\u0299\70\0\1\u029a"+
    "\56\0\1\u029b\76\0\1\u029c\62\0\1\u029d\104\0\1\u029e"+
    "\47\0\1\u029f\74\0\1\u02a0\57\0\13\7\1\u02a1\15\7"+
    "\1\0\4\7\33\0\6\7\1\u02a2\22\7\1\0\4\7"+
    "\33\0\5\7\1\u02a3\23\7\1\0\4\7\33\0\4\7"+
    "\1\u02a4\24\7\1\0\4\7\33\0\21\7\1\u02a5\7\7"+
    "\1\0\4\7\33\0\12\7\1\u02a6\16\7\1\0\4\7"+
    "\33\0\10\7\1\u02a7\20\7\1\0\4\7\33\0\11\7"+
    "\1\u02a8\17\7\1\0\4\7\33\0\26\7\1\u02a9\2\7"+
    "\1\0\4\7\33\0\5\7\1\u02aa\23\7\1\0\4\7"+
    "\33\0\14\7\1\u02ab\14\7\1\0\4\7\33\0\14\7"+
    "\1\u02ac\14\7\1\0\4\7\33\0\26\7\1\u02ad\2\7"+
    "\1\0\4\7\33\0\15\7\1\u02ae\13\7\1\0\4\7"+
    "\33\0\10\7\1\u02af\20\7\1\0\4\7\33\0\17\7"+
    "\1\u02b0\11\7\1\0\4\7\33\0\11\7\1\u02b1\17\7"+
    "\1\0\4\7\33\0\11\7\1\u02b2\17\7\1\0\4\7"+
    "\61\0\1\u02b3\76\0\1\u02b4\51\0\1\u02b5\106\0\1\u02b6"+
    "\63\0\1\u02b7\52\0\1\u02b8\64\0\1\u02b9\101\0\1\u02ba"+
    "\102\0\1\u02bb\63\0\1\u02bc\56\0\1\u02bd\64\0\1\u02be"+
    "\101\0\1\u02bf\70\0\1\u02c0\57\0\1\u02c1\104\0\1\u02c2"+
    "\65\0\1\u02c3\70\0\1\u02c4\101\0\1\u02c5\52\0\1\u02c6"+
    "\74\0\1\u02c7\62\0\1\u02c8\77\0\1\u02c9\53\0\31\7"+
    "\1\0\3\7\1\u02ca\33\0\6\7\1\u02cb\22\7\1\0"+
    "\4\7\33\0\5\7\1\u02cc\23\7\1\0\4\7\33\0"+
    "\4\7\1\u02cd\24\7\1\0\4\7\33\0\21\7\1\u02ce"+
    "\7\7\1\0\4\7\33\0\20\7\1\u02cf\10\7\1\0"+
    "\4\7\33\0\3\7\1\u02d0\25\7\1\0\4\7\33\0"+
    "\15\7\1\u02d1\13\7\1\0\4\7\33\0\22\7\1\u02d2"+
    "\6\7\1\0\4\7\33\0\21\7\1\u02d3\7\7\1\0"+
    "\4\7\33\0\17\7\1\u02d4\11\7\1\0\4\7\33\0"+
    "\15\7\1\u02d5\13\7\1\0\4\7\33\0\20\7\1\u02d6"+
    "\10\7\1\0\4\7\41\0\1\u02d7\66\0\1\u02d8\100\0"+
    "\1\u02d9\71\0\1\u02da\61\0\1\u02db\102\0\1\u02dc\54\0"+
    "\1\u02dd\105\0\1\u02de\56\0\1\u02df\100\0\1\u02e0\55\0"+
    "\1\u02e1\70\0\1\u02e2\112\0\1\u02e3\50\0\1\u02e4\116\0"+
    "\1\u02e5\46\0\1\u02e6\73\0\1\u02e7\73\0\1\u02e8\70\0"+
    "\1\u02e9\50\0\15\7\1\u02ea\13\7\1\0\4\7\33\0"+
    "\11\7\1\u02eb\17\7\1\0\4\7\33\0\11\7\1\u02ec"+
    "\17\7\1\0\4\7\33\0\4\7\1\u02ed\24\7\1\0"+
    "\4\7\33\0\11\7\1\u02ee\5\7\1\u02ef\11\7\1\0"+
    "\4\7\33\0\20\7\1\u02f0\10\7\1\0\4\7\33\0"+
    "\21\7\1\u02f1\7\7\1\0\4\7\33\0\15\7\1\u02f2"+
    "\13\7\1\0\4\7\33\0\6\7\1\u02f3\22\7\1\0"+
    "\4\7\33\0\26\7\1\u02f4\2\7\1\0\4\7\53\0"+
    "\1\u02f5\67\0\1\u02f6\55\0\1\u02f7\107\0\1\u02f8\57\0"+
    "\1\u02f9\75\0\1\u02fa\66\0\1\u02fb\100\0\1\u02fc\62\0"+
    "\1\u02fd\70\0\1\u02fe\65\0\1\u02ff\66\0\1\u0300\104\0"+
    "\1\u0301\76\0\1\u0302\34\0\14\7\1\u0303\14\7\1\0"+
    "\4\7\33\0\20\7\1\u0304\10\7\1\0\4\7\33\0"+
    "\20\7\1\u0305\10\7\1\0\4\7\33\0\5\7\1\u0306"+
    "\23\7\1\0\4\7\33\0\15\7\1\u0307\13\7\1\0"+
    "\4\7\33\0\4\7\1\u0308\24\7\1\0\4\7\33\0"+
    "\3\7\1\u0309\25\7\1\0\4\7\33\0\15\7\1\u030a"+
    "\13\7\1\0\4\7\33\0\5\7\1\u030b\23\7\1\0"+
    "\4\7\33\0\20\7\1\u030c\10\7\1\0\4\7\33\0"+
    "\20\7\1\u030d\10\7\1\0\4\7\63\0\1\u030e\57\0"+
    "\1\u030f\77\0\1\u0310\65\0\1\u0311\71\0\1\u0312\47\0"+
    "\1\u0313\75\0\1\u0314\75\0\1\u0315\53\0\20\7\1\u0316"+
    "\10\7\1\0\4\7\33\0\23\7\1\u0317\5\7\1\0"+
    "\4\7\33\0\21\7\1\u0318\7\7\1\0\4\7\33\0"+
    "\23\7\1\u0319\5\7\1\0\4\7\52\0\1\u031a\71\0"+
    "\1\u031b\63\0\1\u031c\62\0\1\u031d\67\0\1\u031e\100\0"+
    "\1\u031f\54\0\4\7\1\u0320\24\7\1\0\4\7\33\0"+
    "\20\7\1\u0321\10\7\1\0\4\7\41\0\1\u0322\67\0"+
    "\1\u0323\66\0\1\u0324\65\0\11\7\1\u0325\17\7\1\0"+
    "\4\7\44\0\1\u0326\70\0\1\u0327\5\0\1\u0328\51\0"+
    "\20\7\1\u0329\10\7\1\0\4\7\53\0\1\u032a\65\0"+
    "\1\u032b\57\0\1\u032c\104\0\1\u032d\73\0\1\u032e\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36366];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\27\1\1\11\2\1\11\11"+
    "\4\1\2\11\7\1\1\0\2\11\1\0\103\1\2\11"+
    "\1\1\1\11\1\1\13\11\2\0\133\1\1\11\1\1"+
    "\1\11\1\0\31\1\1\0\110\1\1\11\24\1\1\0"+
    "\124\1\14\0\101\1\27\0\56\1\4\0\1\1\3\0"+
    "\1\11\11\0\1\11\1\0\1\11\5\0\43\1\2\0"+
    "\1\11\21\0\1\11\4\0\22\1\1\0\1\11\6\0"+
    "\1\11\7\0\2\11\5\0\15\1\2\0\1\11\5\0"+
    "\1\11\5\0\2\11\2\0\1\11\13\1\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\2\11\3\0\1\11"+
    "\13\1\1\0\2\11\5\0\4\1\3\11\3\0\2\1"+
    "\1\0\1\11\1\0\1\1\3\0\1\1\1\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[814];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenKind type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenKind type, String value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CPPScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3538) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to ZZ_INITIAL.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position pos from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenKind.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Ignore: don't return anything. */
            } 
            // fall through
          case 167: break;
          case 2: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 168: break;
          case 3: 
            { return symbol(TokenKind.DIV);
            } 
            // fall through
          case 169: break;
          case 4: 
            { return symbol(TokenKind.MULT);
            } 
            // fall through
          case 170: break;
          case 5: 
            { return symbol(TokenKind.IDENTIFIER, yytext());
            } 
            // fall through
          case 171: break;
          case 6: 
            { return symbol(TokenKind.INTEGER_LITERAL, yytext());
            } 
            // fall through
          case 172: break;
          case 7: 
            { return symbol(TokenKind.COLON);
            } 
            // fall through
          case 173: break;
          case 8: 
            { return symbol(TokenKind.LPAREN);
            } 
            // fall through
          case 174: break;
          case 9: 
            { return symbol(TokenKind.RPAREN);
            } 
            // fall through
          case 175: break;
          case 10: 
            { return symbol(TokenKind.LBRACE);
            } 
            // fall through
          case 176: break;
          case 11: 
            { return symbol(TokenKind.RBRACE);
            } 
            // fall through
          case 177: break;
          case 12: 
            { return symbol(TokenKind.LBRACK);
            } 
            // fall through
          case 178: break;
          case 13: 
            { return symbol(TokenKind.RBRACK);
            } 
            // fall through
          case 179: break;
          case 14: 
            { return symbol(TokenKind.SEMICOLON);
            } 
            // fall through
          case 180: break;
          case 15: 
            { return symbol(TokenKind.COMMA);
            } 
            // fall through
          case 181: break;
          case 16: 
            { return symbol(TokenKind.DOT);
            } 
            // fall through
          case 182: break;
          case 17: 
            { return symbol(TokenKind.EQ);
            } 
            // fall through
          case 183: break;
          case 18: 
            { return symbol(TokenKind.GT);
            } 
            // fall through
          case 184: break;
          case 19: 
            { return symbol(TokenKind.LT);
            } 
            // fall through
          case 185: break;
          case 20: 
            { return symbol(TokenKind.NOT);
            } 
            // fall through
          case 186: break;
          case 21: 
            { return symbol(TokenKind.COMP);
            } 
            // fall through
          case 187: break;
          case 22: 
            { return symbol(TokenKind.QUESTION);
            } 
            // fall through
          case 188: break;
          case 23: 
            { return symbol(TokenKind.AND);
            } 
            // fall through
          case 189: break;
          case 24: 
            { return symbol(TokenKind.OR);
            } 
            // fall through
          case 190: break;
          case 25: 
            { return symbol(TokenKind.PLUS);
            } 
            // fall through
          case 191: break;
          case 26: 
            { return symbol(TokenKind.MINUS);
            } 
            // fall through
          case 192: break;
          case 27: 
            { return symbol(TokenKind.XOR);
            } 
            // fall through
          case 193: break;
          case 28: 
            { return symbol(TokenKind.MOD);
            } 
            // fall through
          case 194: break;
          case 29: 
            { return symbol(TokenKind.DIVEQ);
            } 
            // fall through
          case 195: break;
          case 30: 
            { return symbol(TokenKind.MULTEQ);
            } 
            // fall through
          case 196: break;
          case 31: 
            { return symbol(TokenKind.IF);
            } 
            // fall through
          case 197: break;
          case 32: 
            { return symbol(TokenKind.DO);
            } 
            // fall through
          case 198: break;
          case 33: 
            { return symbol(TokenKind.EQEQ);
            } 
            // fall through
          case 199: break;
          case 34: 
            { return symbol(TokenKind.GTEQ);
            } 
            // fall through
          case 200: break;
          case 35: 
            { return symbol(TokenKind.RSHIFT);
            } 
            // fall through
          case 201: break;
          case 36: 
            { return symbol(TokenKind.LTEQ);
            } 
            // fall through
          case 202: break;
          case 37: 
            { return symbol(TokenKind.LSHIFT);
            } 
            // fall through
          case 203: break;
          case 38: 
            { return symbol(TokenKind.NOTEQ);
            } 
            // fall through
          case 204: break;
          case 39: 
            { return symbol(TokenKind.ANDEQ);
            } 
            // fall through
          case 205: break;
          case 40: 
            { return symbol(TokenKind.ANDAND);
            } 
            // fall through
          case 206: break;
          case 41: 
            { return symbol(TokenKind.OREQ);
            } 
            // fall through
          case 207: break;
          case 42: 
            { return symbol(TokenKind.OROR);
            } 
            // fall through
          case 208: break;
          case 43: 
            { return symbol(TokenKind.PLUSEQ);
            } 
            // fall through
          case 209: break;
          case 44: 
            { return symbol(TokenKind.PLUSPLUS);
            } 
            // fall through
          case 210: break;
          case 45: 
            { return symbol(TokenKind.MINUSEQ);
            } 
            // fall through
          case 211: break;
          case 46: 
            { return symbol(TokenKind.MINUSMINUS);
            } 
            // fall through
          case 212: break;
          case 47: 
            { return symbol(TokenKind.XOREQ);
            } 
            // fall through
          case 213: break;
          case 48: 
            { return symbol(TokenKind.MODEQ);
            } 
            // fall through
          case 214: break;
          case 49: 
            { return symbol(TokenKind.ASM);
            } 
            // fall through
          case 215: break;
          case 50: 
            { return symbol(TokenKind.INT);
            } 
            // fall through
          case 216: break;
          case 51: 
            { return symbol(TokenKind.IOS);
            } 
            // fall through
          case 217: break;
          case 52: 
            { return symbol(TokenKind.NEW);
            } 
            // fall through
          case 218: break;
          case 53: 
            { return symbol(TokenKind.SET);
            } 
            // fall through
          case 219: break;
          case 54: 
            { return symbol(TokenKind.FOR);
            } 
            // fall through
          case 220: break;
          case 55: 
            { return symbol(TokenKind.MAP);
            } 
            // fall through
          case 221: break;
          case 56: 
            { return symbol(TokenKind.TRY);
            } 
            // fall through
          case 222: break;
          case 57: 
            { return symbol(TokenKind.CIN);
            } 
            // fall through
          case 223: break;
          case 58: 
            { return symbol(TokenKind.RSHIFTEQ);
            } 
            // fall through
          case 224: break;
          case 59: 
            { return symbol(TokenKind.URSHIFT);
            } 
            // fall through
          case 225: break;
          case 60: 
            { return symbol(TokenKind.LSHIFTEQ);
            } 
            // fall through
          case 226: break;
          case 61: 
            { return symbol(TokenKind.AUTO);
            } 
            // fall through
          case 227: break;
          case 62: 
            { return symbol(TokenKind.LIST);
            } 
            // fall through
          case 228: break;
          case 63: 
            { return symbol(TokenKind.LONG);
            } 
            // fall through
          case 229: break;
          case 64: 
            { return symbol(TokenKind.GOTO);
            } 
            // fall through
          case 230: break;
          case 65: 
            { return symbol(TokenKind.NULL_LITERAL);
            } 
            // fall through
          case 231: break;
          case 66: 
            { return symbol(TokenKind.ELSE);
            } 
            // fall through
          case 232: break;
          case 67: 
            { return symbol(TokenKind.ENUM);
            } 
            // fall through
          case 233: break;
          case 68: 
            { return symbol(TokenKind.BOOLEANTRUE);
            } 
            // fall through
          case 234: break;
          case 69: 
            { return symbol(TokenKind.THIS);
            } 
            // fall through
          case 235: break;
          case 70: 
            { return symbol(TokenKind.CASE);
            } 
            // fall through
          case 236: break;
          case 71: 
            { return symbol(TokenKind.COUT);
            } 
            // fall through
          case 237: break;
          case 72: 
            { return symbol(TokenKind.CHAR);
            } 
            // fall through
          case 238: break;
          case 73: 
            { return symbol(TokenKind.BOOL);
            } 
            // fall through
          case 239: break;
          case 74: 
            { return symbol(TokenKind.VOID);
            } 
            // fall through
          case 240: break;
          case 75: 
            { return symbol(TokenKind.URSHIFTEQ);
            } 
            // fall through
          case 241: break;
          case 76: 
            { return symbol(TokenKind.ARRAY);
            } 
            // fall through
          case 242: break;
          case 77: 
            { return symbol(TokenKind.STACK);
            } 
            // fall through
          case 243: break;
          case 78: 
            { return symbol(TokenKind.SHORT);
            } 
            // fall through
          case 244: break;
          case 79: 
            { return symbol(TokenKind.BOOLEANFALSE);
            } 
            // fall through
          case 245: break;
          case 80: 
            { return symbol(TokenKind.FLOAT);
            } 
            // fall through
          case 246: break;
          case 81: 
            { return symbol(TokenKind.DEQUE);
            } 
            // fall through
          case 247: break;
          case 82: 
            { return symbol(TokenKind.QUEUE);
            } 
            // fall through
          case 248: break;
          case 83: 
            { return symbol(TokenKind.THROW);
            } 
            // fall through
          case 249: break;
          case 84: 
            { return symbol(TokenKind.CATCH);
            } 
            // fall through
          case 250: break;
          case 85: 
            { return symbol(TokenKind.CLASS);
            } 
            // fall through
          case 251: break;
          case 86: 
            { return symbol(TokenKind.CONST);
            } 
            // fall through
          case 252: break;
          case 87: 
            { return symbol(TokenKind.COMPL);
            } 
            // fall through
          case 253: break;
          case 88: 
            { return symbol(TokenKind.UNION);
            } 
            // fall through
          case 254: break;
          case 89: 
            { return symbol(TokenKind.USING);
            } 
            // fall through
          case 255: break;
          case 90: 
            { return symbol(TokenKind.BITOR);
            } 
            // fall through
          case 256: break;
          case 91: 
            { return symbol(TokenKind.BREAK);
            } 
            // fall through
          case 257: break;
          case 92: 
            { return symbol(TokenKind.WHILE);
            } 
            // fall through
          case 258: break;
          case 93: 
            { return symbol(TokenKind.INLINE);
            } 
            // fall through
          case 259: break;
          case 94: 
            { return symbol(TokenKind.IOSFWD);
            } 
            // fall through
          case 260: break;
          case 95: 
            { return symbol(TokenKind.SIGNED);
            } 
            // fall through
          case 261: break;
          case 96: 
            { return symbol(TokenKind.SIZEOF);
            } 
            // fall through
          case 262: break;
          case 97: 
            { return symbol(TokenKind.STATIC);
            } 
            // fall through
          case 263: break;
          case 98: 
            { return symbol(TokenKind.STRING);
            } 
            // fall through
          case 264: break;
          case 99: 
            { return symbol(TokenKind.STRUCT);
            } 
            // fall through
          case 265: break;
          case 100: 
            { return symbol(TokenKind.SWITCH);
            } 
            // fall through
          case 266: break;
          case 101: 
            { return symbol(TokenKind.FRIEND);
            } 
            // fall through
          case 267: break;
          case 102: 
            { return symbol(TokenKind.DOUBLE);
            } 
            // fall through
          case 268: break;
          case 103: 
            { return symbol(TokenKind.DELETE);
            } 
            // fall through
          case 269: break;
          case 104: 
            { return symbol(TokenKind.EXTERN);
            } 
            // fall through
          case 270: break;
          case 105: 
            { return symbol(TokenKind.EXPORT);
            } 
            // fall through
          case 271: break;
          case 106: 
            { return symbol(TokenKind.MEMORY);
            } 
            // fall through
          case 272: break;
          case 107: 
            { return symbol(TokenKind.TYPEID);
            } 
            // fall through
          case 273: break;
          case 108: 
            { return symbol(TokenKind.CHRONO);
            } 
            // fall through
          case 274: break;
          case 109: 
            { return symbol(TokenKind.PUBLIC);
            } 
            // fall through
          case 275: break;
          case 110: 
            { return symbol(TokenKind.BITAND);
            } 
            // fall through
          case 276: break;
          case 111: 
            { return symbol(TokenKind.BITSET);
            } 
            // fall through
          case 277: break;
          case 112: 
            { return symbol(TokenKind.RETURN);
            } 
            // fall through
          case 278: break;
          case 113: 
            { return symbol(TokenKind.ALIGNAS);
            } 
            // fall through
          case 279: break;
          case 114: 
            { return symbol(TokenKind.ALIGNOF);
            } 
            // fall through
          case 280: break;
          case 115: 
            { return symbol(TokenKind.ISTREAM);
            } 
            // fall through
          case 281: break;
          case 116: 
            { return symbol(TokenKind.IOMANIP);
            } 
            // fall through
          case 282: break;
          case 117: 
            { return symbol(TokenKind.NULLPTR);
            } 
            // fall through
          case 283: break;
          case 118: 
            { return symbol(TokenKind.SSTREAM);
            } 
            // fall through
          case 284: break;
          case 119: 
            { return symbol(TokenKind.OSTREAM);
            } 
            // fall through
          case 285: break;
          case 120: 
            { return symbol(TokenKind.FSTREAM);
            } 
            // fall through
          case 286: break;
          case 121: 
            { return symbol(TokenKind.DEFAULT);
            } 
            // fall through
          case 287: break;
          case 122: 
            { return symbol(TokenKind.MUTABLE);
            } 
            // fall through
          case 288: break;
          case 123: 
            { return symbol(TokenKind.TYPEDEF);
            } 
            // fall through
          case 289: break;
          case 124: 
            { return symbol(TokenKind.CONCEPT);
            } 
            // fall through
          case 290: break;
          case 125: 
            { return symbol(TokenKind.PRIVATE);
            } 
            // fall through
          case 291: break;
          case 126: 
            { return symbol(TokenKind.UTILITY);
            } 
            // fall through
          case 292: break;
          case 127: 
            { return symbol(TokenKind.VIRTUAL);
            } 
            // fall through
          case 293: break;
          case 128: 
            { return symbol(TokenKind.IOSTREAM);
            } 
            // fall through
          case 294: break;
          case 129: 
            { return symbol(TokenKind.ITERATOR);
            } 
            // fall through
          case 295: break;
          case 130: 
            { return symbol(TokenKind.NOEXCEPT);
            } 
            // fall through
          case 296: break;
          case 131: 
            { return symbol(TokenKind.OPERATOR);
            } 
            // fall through
          case 297: break;
          case 132: 
            { return symbol(TokenKind.DECLTYPE);
            } 
            // fall through
          case 298: break;
          case 133: 
            { return symbol(TokenKind.EXPLICIT);
            } 
            // fall through
          case 299: break;
          case 134: 
            { return symbol(TokenKind.TEMPLATE);
            } 
            // fall through
          case 300: break;
          case 135: 
            { return symbol(TokenKind.TYPENAME);
            } 
            // fall through
          case 301: break;
          case 136: 
            { return symbol(TokenKind.CO_AWAIT);
            } 
            // fall through
          case 302: break;
          case 137: 
            { return symbol(TokenKind.CO_YIELD);
            } 
            // fall through
          case 303: break;
          case 138: 
            { return symbol(TokenKind.CONTINUE);
            } 
            // fall through
          case 304: break;
          case 139: 
            { return symbol(TokenKind.UNSIGNED);
            } 
            // fall through
          case 305: break;
          case 140: 
            { return symbol(TokenKind.REGISTER);
            } 
            // fall through
          case 306: break;
          case 141: 
            { return symbol(TokenKind.REFLEXPR);
            } 
            // fall through
          case 307: break;
          case 142: 
            { return symbol(TokenKind.REQUIRES);
            } 
            // fall through
          case 308: break;
          case 143: 
            { return symbol(TokenKind.VOLATILE);
            } 
            // fall through
          case 309: break;
          case 144: 
            { return symbol(TokenKind.WCHART_T);
            } 
            // fall through
          case 310: break;
          case 145: 
            { return symbol(TokenKind.ALGORITHM);
            } 
            // fall through
          case 311: break;
          case 146: 
            { return symbol(TokenKind.NAMESPACE);
            } 
            // fall through
          case 312: break;
          case 147: 
            { return symbol(TokenKind.STDEXCEPT);
            } 
            // fall through
          case 313: break;
          case 148: 
            { return symbol(TokenKind.STREAMBUF);
            } 
            // fall through
          case 314: break;
          case 149: 
            { return symbol(TokenKind.CO_RETURN);
            } 
            // fall through
          case 315: break;
          case 150: 
            { return symbol(TokenKind.CONSTEXPR);
            } 
            // fall through
          case 316: break;
          case 151: 
            { return symbol(TokenKind.CONSTEVAL);
            } 
            // fall through
          case 317: break;
          case 152: 
            { return symbol(TokenKind.PROTECTED);
            } 
            // fall through
          case 318: break;
          case 153: 
            { return symbol(TokenKind.FUNCTIONAL);
            } 
            // fall through
          case 319: break;
          case 154: 
            { return symbol(TokenKind.CONST_CAST);
            } 
            // fall through
          case 320: break;
          case 155: 
            { return symbol(TokenKind.STATIC_CAST);
            } 
            // fall through
          case 321: break;
          case 156: 
            { return symbol(TokenKind.SYNCHRONIZED);
            } 
            // fall through
          case 322: break;
          case 157: 
            { return symbol(TokenKind.FORWARD_LIST);
            } 
            // fall through
          case 323: break;
          case 158: 
            { return symbol(TokenKind.DYNAMIC_CAST);
            } 
            // fall through
          case 324: break;
          case 159: 
            { return symbol(TokenKind.THREAD_LOCAL);
            } 
            // fall through
          case 325: break;
          case 160: 
            { return symbol(TokenKind.ATOMIC_CANCEL);
            } 
            // fall through
          case 326: break;
          case 161: 
            { return symbol(TokenKind.ATOMIC_COMMIT);
            } 
            // fall through
          case 327: break;
          case 162: 
            { return symbol(TokenKind.STATIC_ASSERT);
            } 
            // fall through
          case 328: break;
          case 163: 
            { return symbol(TokenKind.UNORDERED_SET);
            } 
            // fall through
          case 329: break;
          case 164: 
            { return symbol(TokenKind.UNORDERED_MAP);
            } 
            // fall through
          case 330: break;
          case 165: 
            { return symbol(TokenKind.ATOMIC_NOEXCEPT);
            } 
            // fall through
          case 331: break;
          case 166: 
            { return symbol(TokenKind.REINTERPRET_CAST);
            } 
            // fall through
          case 332: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
